#!/bin/bash


# 安装 libssh2
# mkdir libssh2 \
# && tar -xf libssh2-1.9.0.tar.gz -C libssh2 --strip-components=1 \
# && ( cd libssh2 &&  ./configure --prefix=/usr/local/libssh2 && make -j2 && make install ) 

#printf "/usr/local/libssh2\n" | pecl install ssh2-0.13.tgz  && docker-php-ext-enable  ssh2
# 安装 ssh2
# mkdir ssh2 \
# && tar -xf ssh2-0.13.tgz -C ssh2 --strip-components=1 \
# && ( cd ssh2 && phpize && ./configure --with-php-config=/usr/local/bin/php-config   --with-ssh2=/usr/local/libssh2 && make -j2 && make install ) \
# && docker-php-ext-enable ssh2

# php -m

# echo ----[PWD1: `pwd`]
# ( cd ssh2 \
 # && echo ----[PWD2: `pwd`] )
# echo ----[PWD3: `pwd`]

# CPU_NUM="-j$(nproc)"
# echo $CPU_NUM

# function aaf() {
	# return 0
# }

# (
	# aaf 
# ) && (
	# echo Yes
	# echo 状态码：$?
# ) || (
	# echo No
	# echo 状态码：$?
# )

# cp sources.list  /etc/apt/
# apt update

# echo 建立软链接...
# for i in `find /usr/lib/  -name libzstd.so*`	
# do	
	# #str: /usr/lib/x86_64-linux-gnu/libzstd.so.4.11.0
	# #echo str: ${i}
	# #ln -s  /usr/x86_64-linux-gnu/libzstd.so*   /usr/lib/
	# ln -s  ${i}   /usr/lib/
# done


# ================================================== 
# 函数名称：RepeatStr		 		
# 函数功能：输出重复字符 		
# 函数参数：			 		 	
#     	     $1:   字符		      	 
#     	   [$2]:   重复次数(默认:终端列数)	      	 
# 			 								
# 返回值： 								
# 			 									 	  
# ================================================== 
function RepeatStr(){	
	if [ "${1}" == "" ];then
		echo "RepeatStr():参数不能为空"
		return 1
	fi
	# 终端列数（宽）
	TerminalColumns=`tput cols`
	# 终端行数（高）
	TerminalLines=`tput lines`
	# 字符
	Char="$1"
	# 重复次数
	RepeatNum="${2:-${TerminalColumns}}"
	# 一个字符剩余空格，再将空格替换为字符
	printf "%-${RepeatNum}s\n" "${Char}" | sed "s/ /${Char}/g"
}

# RepeatStr  =  8
# echo AAA`RepeatStr  =  8`

echo 终端宽度：`tput cols`
echo `stty size`

# date +%s   可以得到UNIX的时间戳
#       -d   [可选]指定时间  
# StartTime=`date +%s -d '2020-01-03 06:07:24'`   #秒(s)
# StopTime=`date +%s -d '2020-01-03 06:08:24'`    #秒(s)
# Time_s=$(( $StopTime-$StartTime ))              #计算时间差(s)
# Time_hms=`date "+%H:%M:%S" -d  @$Time_s`        #将秒数格式化
# echo StartTime: $StartTime
# echo StopTime: $StopTime
# echo Time_s: $Time_s
# echo Time_hms: $Time_hms

# printf "\033[1;30;46m%-32s  %-22s\033[0m\n" "名称"  "状态"  #蓝底黑字
# printf "\033[1;37;42m%-30s  %-20s\033[0m\n" "a"  "Success"  #绿底白字
# printf "\033[1;37;42m%-30s  %-20s\033[0m\n" "|--a00001"  "Success"
# printf "%-30s  \033[1;32m%-20s\033[0m\n" "|--a00002"  "Success"  #绿字
# printf "%-30s  \033[1;31m%-20s\033[0m\n" "b"  "Error"  #红字
# printf "%-30s  %-20s\n" "|--b00001"  "Success"
# printf "%-30s  %-20s\n" "|--b00002"  "Success"
# printf "\033[1;37;41m%-30s  %-20s\033[0m\n"   "c"   "Error"  #红底白字
# printf "%-30s  %-20s\n" "|--c00001"  "Success"
#printf "%-20s  \033[1;32m%-10s\033[0m  \033[1;31m%-10s\033[0m  \033[1;33m%-30s\033[0m\n"   "安装扩展:8"  "成功:6"  "失败:2"  "耗时:05:54:51"
# 
# printf "\033[1;30;46m%-35s  %-23s  %-23s\033[0m\n"   "名称"  "状态" "耗时"
# printf "\033[1;37;42m%-33s  %-21s  %-21s\033[0m\n"   "AAA"  "Success"  "00:00:00"
# printf "\033[1;37;41m%-33s  %-21s  %-21s\033[0m\n"   "|--bbbb"  "Error"  "00:00:00"

# printf "\033[1;30;46m%-30s  %-18s  %-18s  %-20s  %-30s\033[0m\n"   "名称"  "动作"  "状态"  "耗时"  "备注"
# printf "\033[1;37;42m%-28s  %-16s  %-16s  %-18s  %-30s\033[0m\n"      "AAA"  "Action" "Success"  "00:00:00"  "备注"
# printf "%-20s  %-15s  \033[1;32m%-15s\033[0m  \033[1;31m%-15s\033[0m  \033[1;33m%-30s\033[0m\n"   "安装扩展: 2"  "跳过: 2"  "成功:  0"  "失败: 0"  "总耗时: 00:00:00"

# [ "$aa" == "" ] && echo AAAAAA


# # pathStr=/mnt/tmp/log.tar
# pathStr=log.tar
# dirname  $pathStr  #/mnt/tmp

# UnTarDir=`dirname ${pathStr}`
# [ -e "${UnTarDir}/a"  ] && echo "${UnTarDir}/a" 文件存在

# # 右边开始至匹配到的第一个/ 的内容不保留
# pathStr=${pathStr%/*}
# echo $pathStr  #/mnt/tmp

# # 获取目标的上级目录路径
# echo $PWD  # /mnt/tmp
# apath=/tmp/Logs/
# # cd到目标路径，cd上级路径，pwd输出当前路径
# bb=$(cd $apath ; cd .. ; pwd)
# #bb=$(cd $apath && cd .. && pwd)
# echo bb:$bb   # /tmp
# echo $PWD  # /mnt/tmp


# FROM ubuntu:18.04
# ENV TZ=Asia/Shanghai
# RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \
          # && apt-get update \
          # && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \
          # && apt-get install tzdata \ # 这一步要在上一步执行完之后
          # && apt-get clean \
          # && apt-get autoclean \
          # && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \
# CMD ["/bin/bash"]


# str="aaa=111 bbb=222 ccc=333"
# # 数组
# key=("${str}")
# # 遍历数组
# for i in ${key[@]}
# do
	# # 设置变量
	# eval ${i}  #${i} : aaa=111 
# done

# # 测试(OK)
# echo aaa: $aaa
# echo bbb: $bbb
# echo ccc: $ccc

# LogsIndex=0
# Logs_Result[0]=Success
# #if eval [ "\${Logs_Result[${LogsIndex}]}" == 'Success' ]; then
# if  [ "${Logs_Result[${LogsIndex}]}" == 'Success' ]; then
# echo aaaaaaa
# fi



# -eq  =
# -ne  !=
# -gt  >
# -lt  <
# -ge  >=
# -le  <=



# source VersionNum.funlist
# aa=$(VersionToValue 71)

# echo $aa
# echo aa长度：${#aa}
# [ "${#aa}" == 3 ] && aa=${aa}00
# [ "${#aa}" == 2 ] && aa=${aa}000
# [ "${#aa}" == 1 ] && aa=${aa}0000
# echo $aa

# PHPVersion=50445
# echo PHPVersion: ${PHPVersion}
# # <= 5.4 (PHPVersion=50445)
# [ ${PHPVersion} -le 50499 ]  && Version=2.4.1 && echo ------php5.4------
# # [5.5.0-5.6.0]
# ( ( [ ${PHPVersion} -ge 50500 ] || [ ${PHPVersion} -ge 505 ] ) && ( [ ${PHPVersion} -le 506 ] || [ ${PHPVersion} -le 50600 ] ) ) && Version=2.5.5  && echo ------php5.5.0-5.6.0------

# # = 7.0.0
# ( [ ${PHPVersion} -eq 70000 ] || [ ${PHPVersion} -eq 700 ] ) && Version=2.7.2  && echo ------php7.0.0------
# # [7.1.0-7.4.0]
# ( ( [ ${PHPVersion} -ge 70100 ] || [ ${PHPVersion} -ge 701 ] ) && ( [ ${PHPVersion} -le 704 ] || [ ${PHPVersion} -le 70400 ] ) ) && Version=2.8.1  && echo ------php7.1.0-7.4.0------


