#!/bin/bash

##########################################################
#
# [简述]
# 
# 执行环境: 宿主机
# 调用方式: ./  source  sh 
# 调用参数: 			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称: outhelp		 					  	 
# 函数功能: 帮助文档	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   语言(cn:中文<默认>|en:英文)   
# 		 									 	 
# 返回值:  									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{		
	# 语言
	outhelp_Lang="${1:-cn}"
	# Document	
	if [ "${outhelp_Lang}" == "cn" ];then
		echo
		echo -e "\033[1;37m函数调度器\033[0m"    #白字	
		echo "    将已注册的函数提供给命令行"
		echo
		echo -e "\033[1;37m使用:\033[0m"
		echo "./${SCRIPT_NAME}  函数名称  参数1  参数2...参数8"
		echo -e "\033[1;37m示例:\033[0m"
		echo "./${SCRIPT_NAME}  testAPI_01  \"111\"  \"222\" "
		echo
		echo -e "\033[1;37m已注册的函数列表:\033[0m"
		printf "\033[1;37m%-29s  %-30s  %-60s\033[0m\n"   "函数名称"   "概述"   "描述"  #白字	
		outhelp_i=0
		for outhelp_FName in ${API_FunName[@]}
		do
			printf "%-25s  %-30s  %-60s\n"   "${outhelp_FName}"   "${API_FunName_Note_cn[${outhelp_i}]}"   "${API_FunName_Description_cn[${outhelp_i}]}"
			let outhelp_i++
		done
		echo
		echo -e "使用 \033[1;31m./${SCRIPT_NAME}  函数名称 --help\033[0m 查看详情" 
	else
		echo
		echo -e "\033[1;37mFunction scheduler\033[0m"
		echo "     Provide registered functions to the command line"
		echo
		echo -e "\033[1;37mUse:\033[0m"
		echo "./${SCRIPT_NAME}  FunctionName  arg1  arg2...arg8"
		echo -e "\033[1;37mExample:\033[0m"
		echo "./${SCRIPT_NAME}  testAPI_01  \"111\"  \"222\" "
		echo
		echo -e "\033[1;37mList of registered functions:\033[0m"		
		printf "\033[1;37m%-25s  %-30s  %-60s\033[0m\n"   "FunctionName"   "Overview"   "Description"  #白字	
		outhelp_i=0
		for outhelp_FName in ${API_FunName[@]}
		do
			printf "%-25s  %-30s  %-60s\n"   "${outhelp_FName}"   "${API_FunName_Note_en[${outhelp_i}]}"   "${API_FunName_Description_en[${outhelp_i}]}"
			let outhelp_i++
		done
		echo
		echo -e "Use \033[1;31m./${SCRIPT_NAME}  FunctionName --help\033[0m to view details" 
	fi
	unset outhelp_Lang
	unset outhelp_i
	unset outhelp_FName
}


# ================================================== 
# 函数名称: Executor_Init
# 函数功能: 初始化:命令执行器						 
# 函数参数: 			 		 	  				 
#     		 $1:   			      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
#
#   	${API_Dir} : API目录(funlist/Api/) 		 									 	  
# ================================================== 
function Executor_Init(){
	# 加载配置
	if [ -e "conf/api.conf" ];then
		source conf/api.conf
	else
		# 加载 *.Helpers.funlist (1:是|0:否)
		API_LoadHelpers="0"
		# API 语言(cn|en)
		API_Lang="cn"
	fi
	# 加载 *.Helpers.funlist 
	if [ "${API_LoadHelpers}" == "1" ];then
		HelpersFile=(`find ./funlist/ -name *.Helpers.funlist 2>/dev/null`)
		for f in ${HelpersFile[@]}
		do			
			source $f
		done
	fi
	# API目录
	[ -d "funlist/Api/" ] && API_Dir="funlist/Api/"
	
	# 清除变量
	unset HelpersFile
	unset f
}
##### 函数测试 #####
# Executor_Init


# ================================================== 
# 函数名称: Show_Help  	 
# 函数功能: 显示帮助文档				 
# 函数参数: 			 		 	  				 
#     		 $1:   执行的命令(函数)的索引	      	 
#     	   [$2]:   语言(cn:中文<默认>|en:英文)      	 
# 			 									 	 
# 返回值:  									 	  
# 		 Document				 									 	  
# ================================================== 
function Show_Help(){
	# 索引
	Show_Help_Index="${1}"
	# 语言
	Show_Help_Lang="${2:-cn}"
	# 函数名
	Show_Help_FunName="${API_FunName[${Show_Help_Index}]}"
	# 函数名长度	
	Show_Help_RepeatNum="${#Show_Help_FunName}"		
	Show_Help_RepeatNum=$((${Show_Help_RepeatNum}+3))
	
	# 输出一个字符，剩余是空格，再将空格替换为字符
	#printf "%-${Show_Help_RepeatNum}s" "#" | sed "s/ /#/g"	
	# 输出一个#字符，剩余是空格，再将#替换为空格
	#printf "%-${Show_Help_RepeatNum}s" "#" | sed "s/#/ /g"
	
	a1Str="`[ "${API_Arg1_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg1]: "  || echo "    arg1: "`"
	a2Str="`[ "${API_Arg2_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg2]: "  || echo "    arg2: "`"
	a3Str="`[ "${API_Arg3_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg3]: "  || echo "    arg3: "`"
	a4Str="`[ "${API_Arg4_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg4]: "  || echo "    arg4: "`"
	a5Str="`[ "${API_Arg5_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg5]: "  || echo "    arg5: "`"
	a6Str="`[ "${API_Arg6_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg6]: "  || echo "    arg6: "`"
	a7Str="`[ "${API_Arg7_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg7]: "  || echo "    arg7: "`"
	a8Str="`[ "${API_Arg8_IsNeed[${Show_Help_Index}]}" == "0" ] && echo "  [arg8]: "  || echo "    arg8: "`"
	
	if [ "${Show_Help_Lang}" == "cn" ];then
		echo
		echo -e "\033[1;37m[函数名称]\033[0m"    #白字
		echo -e "\033[1;31m${Show_Help_FunName}\033[0m : ${API_FunName_Note_cn[${Show_Help_Index}]}"  #红字
		[ "${API_FunName_Description_cn[${Show_Help_Index}]}" != "" ] && echo "`printf "%-${Show_Help_RepeatNum}s" "#" | sed "s/#/ /g"`${API_FunName_Description_cn[${Show_Help_Index}]}"
		echo
		echo -e "\033[1;37m[参数列表]\033[0m"    #白字
		[ "${API_Arg1_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a1Str}""${API_Arg1_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg1_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg1_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg2_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a2Str}""${API_Arg2_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg2_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg2_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg3_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a3Str}""${API_Arg3_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg3_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg3_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg4_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a4Str}""${API_Arg4_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg4_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg4_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg5_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a5Str}""${API_Arg5_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg5_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg5_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg6_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a6Str}""${API_Arg6_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg6_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg6_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg7_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a7Str}""${API_Arg7_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg7_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg7_Description_cn[${Show_Help_Index}]}"
		[ "${API_Arg8_Note_cn[${Show_Help_Index}]}" != "" ] && echo "${a8Str}""${API_Arg8_Note_cn[${Show_Help_Index}]}"
		[ "${API_Arg8_Description_cn[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg8_Description_cn[${Show_Help_Index}]}"		
		echo  	 
		echo -e "\033[1;37m使用:\033[0m"    #白字
		echo "./${SCRIPT_NAME}  " \"函数名称\"  \"arg1\"  \"arg2\" ...
		echo
		echo -e "\033[1;37m示例:\033[0m"    #白字
		echo "./${SCRIPT_NAME}  " \"${Show_Help_FunName}\"  \"111\"  \"222\" 
	else
		echo
		echo -e "\033[1;37m[Function name]\033[0m"    #白字
		echo -e "\033[1;31m${Show_Help_FunName}\033[0m : ${API_FunName_Note_en[${Show_Help_Index}]}"  #红字
		[ "${API_FunName_Description_en[${Show_Help_Index}]}" != "" ] && echo "`printf "%-${Show_Help_RepeatNum}s" "#" | sed "s/#/ /g"`${API_FunName_Description_en[${Show_Help_Index}]}"
		echo
		echo -e "\033[1;37m[Parameter list]\033[0m"    #白字
		[ "${API_Arg1_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a1Str}""${API_Arg1_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg1_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg1_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg2_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a2Str}""${API_Arg2_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg2_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg2_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg3_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a3Str}""${API_Arg3_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg3_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg3_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg4_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a4Str}""${API_Arg4_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg4_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg4_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg5_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a5Str}""${API_Arg5_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg5_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg5_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg6_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a6Str}""${API_Arg6_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg6_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg6_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg7_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a7Str}""${API_Arg7_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg7_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg7_Description_en[${Show_Help_Index}]}"
		[ "${API_Arg8_Note_en[${Show_Help_Index}]}" != "" ] && echo "${a8Str}""${API_Arg8_Note_en[${Show_Help_Index}]}"
		[ "${API_Arg8_Description_en[${Show_Help_Index}]}" != "" ] && echo "          ${API_Arg8_Description_en[${Show_Help_Index}]}"		
		echo  	 
		echo -e "\033[1;37mUse:\033[0m"    #白字
		echo "./${SCRIPT_NAME}  " \"FunctionName\"  \"arg1\"  \"arg2\" ...
		echo
		echo -e "\033[1;37mExample:\033[0m"    #白字
		echo "./${SCRIPT_NAME}  " \"${Show_Help_FunName}\"  \"111\"  \"222\" 
	fi
	# 清除变量
	unset Show_Help_Index
	unset Show_Help_Lang
	unset Show_Help_FunName
	unset Show_Help_RepeatNum
	unset  a1Str
	unset  a2Str
	unset  a3Str
	unset  a4Str
	unset  a5Str
	unset  a6Str
	unset  a7Str
	unset  a8Str
}
##### 函数测试 #####
# Show_Help 1


# ================================================== 
# 函数名称: Executor	  	 
# 函数功能: 命令执行器						 
# 函数参数: 			 		 	  				 
#     		 $1:   执行的命令(函数名称)				      	 
#     	 [$2-8]:   参数1-8
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# ================================================== 
function Executor(){
	#函数名称
	FunName="$1"
	[ "${FunName}" == "" ] && echo 'Executor(): FunName 不能为空' && return 1
	#参数1-8
	arg1="$2"
	arg2="$3"
	arg3="$4"
	arg4="$5"
	arg5="$6"
	arg6="$7"
	arg7="$8"
	arg8="$9"
	# 函数是否注册(1:已注册|0:未注册)
	isRegister=0
	# 函数是否存在(1:存在|0:不存在)
	isExist=0
	
	# 判断函数是否注册 
	Executor_i=0
	for FName in ${API_FunName[@]}
	do
		if [ "${FunName}" == "${FName}" ];then
			#注册表中存在函数			
			isRegister=1
			FunNameIndex="${Executor_i}"  #函数索引
		fi
		let Executor_i++
	done
	# 尝试加载API目录中的函数同名文件
	[ -e "${API_Dir}${FunName}.funlist" ] && source "${API_Dir}${FunName}.funlist"
	[ -e "${API_Dir}${FunName}/${FunName}.funlist" ] && source "${API_Dir}${FunName}/${FunName}.funlist"
	# 判断函数是否存在
	if [ "${isRegister}" == "1" ];then
		if [ "`type -t $FunName`" = "function" ] ; then
			#函数存在
			isExist=1
		fi
	fi
	# 参数检查
	if [ "${isRegister}" == "0" ];then
		[ "${API_Lang}" == "cn" ] && echo '函数未注册'
		[ "${API_Lang}" == "en" ] && echo 'Function not registered'
		return 1
	elif [ "${isExist}" == "0" ];then
		[ "${API_Lang}" == "cn" ] && echo '函数未定义'
		[ "${API_Lang}" == "en" ] && echo 'Function not defined'
		return 1
	fi
	
	# 主体
	if [ "${arg1,,}" == '--help' ]; then 
		# 显示函数的帮助文档
		Show_Help "${FunNameIndex}" "${API_Lang}"
	else
		#执行命令
		${FunName}  "${arg1}"  "${arg2}"  "${arg3}"  "${arg4}"  "${arg5}"  "${arg6}"  "${arg7}"  "${arg8}"
	fi
	
	#清除变量
	unset FunName
	unset arg1
	unset arg2
	unset arg3
	unset arg4
	unset arg5
	unset arg6
	unset arg7
	unset arg8	
	unset isRegister	
	unset isExist	
	unset Executor_i	
	unset FName	
}
##### 函数测试 #####
# Executor "testA"  "--help" 
# Executor "testA"  "111" "222" "333" 

# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#

# 初始化
Executor_Init
# ${1,,} : 将字符串转换为小写
if [ "${1,,}" == '--help' ]; then   
   outhelp  "${API_Lang}" # 输出帮助文档
   exit 0
elif [ $1 ] && [ $2 ]; then
   Executor  "$1"  "$2"  "$3" "$4" "$5" "$6" "$7" "$8" "$9"
else 
   [ "${API_Lang}" == "cn" ] && echo -e "\033[1;31m参数不能为空\033[0m"  #红字	
   [ "${API_Lang}" == "en" ] && echo -e "\033[1;31mParameter cannot be empty\033[0m"   #红字	
   outhelp  "${API_Lang}" # 输出帮助文档
   exit 1
fi


# ----函数调用------------------------------------------------------------------------------------------#







