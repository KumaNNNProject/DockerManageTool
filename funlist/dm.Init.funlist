#!/bin/bash

##########################################################
#[FunList]
# [简述]
# 
# 执行环境: 宿主机
# 调用方式: ./  source  sh 
# 调用参数: 			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
#
# 备注: 静态函数列表，使用source包含在文件头部
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#


# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称: outhelp		 					  	 
# 函数功能: 帮助文档	  	  							 
# 函数参数: 			 		 	  				 
# 			 									 	 
# 返回值:  									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{			
	echo
	echo "xxxxxxxx"
	echo
	echo "先引用该文件，再调用相关函数"
	echo "source ${SCRIPT_NAME}"
	echo
	echo "FunctionName  arg1  arg2  ... "
	echo "       参数列表: "
	echo "         arg1: xxxxxx。必需"
	echo "         arg2: xxxxx。可选"
	echo  	 
	echo "示例: "
	echo "FunctionName  8.0"  
		
	return 0 2>/dev/nul
	exit 0
}

# ================================================== 
# 函数名称：Init_Terminal		  	 
# 函数功能：初始化: 终端信息					 
# 函数参数：			 		 	  				 
#     		 [$1]:   	      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 注: 计算终端的相关信息，宽 ，高等		 									 	  
# ================================================== 
function Init_Terminal(){
	# 终端列数(宽)(单位:字符)
	SYS_TerminalColumns=`tput cols`
	# 终端行数(高)(单位:字符)
	SYS_TerminalLines=`tput lines`
	# 是否小屏(0:否|1:是)(-gt >)
	[ "${SYS_TerminalColumns}" -gt "${SYS_SmallSize}" ] && SYS_isSmallScreen="0" || SYS_isSmallScreen="1"
}


# ================================================== 
# 函数名称：Init_Conf		  	 
# 函数功能：初始化: 配置相关						 
# 函数参数：			 		 	  				 
#     		 [$1]:  从环境中读取配置(1:是|0:否<默认>) 	      	 
# 			 		默认从配置文件中读取							 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 注: 加载配置文件，设置变量等			 									 	  
# ================================================== 
function Init_Conf(){
	# 从环境中读取配置(1:是|0:否<默认>) 
	ReadFromEnv="${1:-0}"
	# 工作目录(.../)	
	SYS_WorkDir="${SYS_WorkDir:-`pwd`/}"
	# 语言目录
	SYS_LangDir="${SYS_WorkDir}lang/"	
	
	# 加载配置文件
	if [ "${ReadFromEnv}" != "1" ];then
		# 从文件中读取
		[ -e "${SYS_WorkDir}conf/dm.conf" ] && source "${SYS_WorkDir}conf/dm.conf"
		[ -e "${SYS_WorkDir}conf/user.conf" ] && source "${SYS_WorkDir}conf/user.conf"	
	fi
	
	# 语言
	SYS_Lang="${SYS_Lang:-cn}"
	# 字体(字符串)颜色
	SYS_FontClor="${SYS_FontClor:-36}"
	# 命令字体颜色
	SYS_CmdFontColor="${SYS_CmdFontColor:-35}"
	# 线条颜色
	SYS_LineClor="${SYS_LineClor:-32}"
	# 线条最大长度(单位:字符)
	SYS_LineMax="${SYS_LineMax:-85}"
	# 标题
	if [ "${ReadFromEnv}" != "1" ];then			
		# 从文件中读取
		SYS_Title="`eval echo \\${SYS_Title_${SYS_Lang}:-Docker Management}`"
		SYS_OldTitle="${SYS_Title}"
	else
		# 从环境中读取		
		if [ "${SYS_Title}" == "${SYS_OldTitle}" ];then
			#标题未更改
			SYS_Title="`eval echo \\${SYS_Title_${SYS_Lang}:-Docker Management}`"  # 按语言读取先前设置的来自文件的变量
		else
			#标题已更改
			SYS_Title="${SYS_Title:-Docker Management}"  #读取环境中的变量
		fi
	fi	
	# 缓存超时(s)
	SYS_Timeout="${SYS_Timeout:-100000}"
	# 显示风格(0:背景<默认>|1:无背景)		
	SYS_Style="${SYS_Style:-0}"
	# 出口网络接口
	SYS_InternetInterface="${SYS_InternetInterface:-eth1}"
	# 主机IP(Hip)
	SYS_HostIp="${SYS_HostIp:-`ip_info ${SYS_InternetInterface}`}"
	# 主机名
	SYS_HostName="${SYS_HostName:-MyDocker}"
	# 小屏尺寸(单位:字符)
	SYS_SmallSize="${SYS_SmallSize:-105}"
	# 显示提示文本(1:是|0:否) 
	SYS_ShowTips="${SYS_ShowTips:-1}"
	# 测试模式(1:是|0:否)<测试模式下，Action不会执行> 
	SYS_Test="${SYS_Test:-1}"
	# 终端信息
	Init_Terminal
	
	
	# 缓存根目录(.../)
	SYS_TmpDir="${SYS_TmpDir:-/tmp/dmCache/}"
	TmpDir_Log="${SYS_TmpDir}Log/"
	TmpDir_Images="${SYS_TmpDir}Images/"
	TmpDir_Images_Sub="${TmpDir_Images}Sub/"
	TmpDir_Containers="${SYS_TmpDir}Containers/"
	TmpDir_Containers_Sub="${TmpDir_Containers}Sub/"
	TmpDir_Networks="${SYS_TmpDir}Networks/"
	TmpDir_Networks_Sub="${TmpDir_Networks}Sub/"
	TmpDir_Volumes="${SYS_TmpDir}Volumes/"
	TmpDir_Volumes_Sub="${TmpDir_Volumes}Sub/"
	TmpDir_Searchs="${SYS_TmpDir}Searchs/"
	TmpDir_Searchs_Sub="${TmpDir_Searchs}Sub/"
	
	# 清除变量
	unset ReadFromEnv
}
##### 函数测试 #####
#Init_Conf


# ================================================== 
# 函数名称：Init_FileDir			  	 
# 函数功能：初始化: 目录相关						 
# 函数参数：			 		 	  				 
#     		 [$1]:   	      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# ================================================== 
function Init_FileDir(){
	# 构建相关目录
	#[ ! -d "${SYS_LangDir}" ] && mkdir -p "${SYS_LangDir}"
	[ ! -d "${SYS_TmpDir}" ] && mkdir -p "${SYS_TmpDir}"
	[ ! -d "${TmpDir_Log}" ] && mkdir -p "${TmpDir_Log}"
	[ ! -d "${TmpDir_Log}Images/" ] && mkdir -p "${TmpDir_Log}Images/"
	[ ! -d "${TmpDir_Log}Containers/" ] && mkdir -p "${TmpDir_Log}Containers/"
	[ ! -d "${TmpDir_Log}Networks/" ] && mkdir -p "${TmpDir_Log}Networks/"
	[ ! -d "${TmpDir_Log}Volumes/" ] && mkdir -p "${TmpDir_Log}Volumes/"
	[ ! -d "${TmpDir_Images}" ] && mkdir -p "${TmpDir_Images}"
	[ ! -d "${TmpDir_Images_Sub}" ] && mkdir -p "${TmpDir_Images_Sub}"
	[ ! -d "${TmpDir_Containers}" ] && mkdir -p "${TmpDir_Containers}"
	[ ! -d "${TmpDir_Containers_Sub}" ] && mkdir -p "${TmpDir_Containers_Sub}"
	[ ! -d "${TmpDir_Networks}" ] && mkdir -p "${TmpDir_Networks}"
	[ ! -d "${TmpDir_Networks_Sub}" ] && mkdir -p "${TmpDir_Networks_Sub}"
	[ ! -d "${TmpDir_Volumes}" ] && mkdir -p "${TmpDir_Volumes}"
	[ ! -d "${TmpDir_Volumes_Sub}" ] && mkdir -p "${TmpDir_Volumes_Sub}"
	[ ! -d "${TmpDir_Searchs}" ] && mkdir -p "${TmpDir_Searchs}"
	[ ! -d "${TmpDir_Searchs_Sub}" ] && mkdir -p "${TmpDir_Searchs_Sub}"
}
##### 函数测试 #####
#Init_FileDir

# ================================================== 
# 函数名称：Init_Logs			  	 
# 函数功能：初始化: 日志相关						 
# 函数参数：			 		 	  				 
#     		 [$1]:   	      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# ================================================== 
function Init_Logs(){
	# 日志字段名
	[ ! -e "${TmpDir_Log}Images/Images.title" ] && echo "ID#时间#项#动作#动作ID#结果#原文">"${TmpDir_Log}Images/Images.title"
	[ ! -e "${TmpDir_Log}Containers/Containers.title" ] && echo "ID#时间#项#动作#动作ID#结果#原文">"${TmpDir_Log}Containers/Containers.title"
	[ ! -e "${TmpDir_Log}Networks/Networks.title" ] && echo "ID#时间#项#动作#动作ID#结果#原文">"${TmpDir_Log}Networks/Networks.title"
	[ ! -e "${TmpDir_Log}Volumes/Volumes.title" ] && echo "ID#时间#项#动作#动作ID#结果#原文">"${TmpDir_Log}Volumes/Volumes.title"
	# 日志内容示例
	#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#动作#'动作ID'#Success#'原文'">>"${TmpDir_Log}Images/Images.log"
	#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#动作#'动作ID'#Fail#'原文'">>"${TmpDir_Log}Images/Images.log"
}
##### 函数测试 #####
#Init_Logs


# ================================================== 
# 函数名称：Init_Infos			  	 
# 函数功能：初始化: 缓存数据						 
# 函数参数：			 		 	  				 
#     		 [$1]:   是否删除缓存(1:是|0:否<默认>)	      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 注: 亦可作为 刷新缓存 使用			 									 	  
# ================================================== 
function Init_Infos(){
	# 是否删除缓存(1:是|0:否<默认>)
	DelCache="${1:-0}"
	
	if [ "${DelCache}" == "1" ];then
		# 删除缓存相关目录及文件
		rm -rf  "${TmpDir_Images}"*						
		rm -rf  "${TmpDir_Containers}"*						
		rm -rf  "${TmpDir_Networks}"*						
		rm -rf  "${TmpDir_Volumes}"*
		# 重构缓存相关目录
		Init_FileDir
	fi
	# 重构缓存	
	CacheHandle "images" "" 1  true
	CacheHandle "containers" "" 1  true
	CacheHandle "networks" "" 1  true
	CacheHandle "volumes" "" 1  true
	Infos_About	
}
##### 函数测试 #####
## Init_Infos=>CacheHandle(需要先加载Infos.funlist)
## source funlist/c.Infos.funlist
# Init_Infos 1

# ================================================== 
# 函数名称：Init_Lang			  	 
# 函数功能：初始化: 语言					 
# 函数参数：			 		 	  				 
#     		 [$1]:    	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# ================================================== 
function Init_Lang(){	
	Lang_load  "Action"
	Lang_load  "Show"
	Lang_load  "Infos"
	Lang_load  "Helpers"
	Lang_load  "Menu"
	Lang_load  "Menu.Containers"
	Lang_load  "Menu.Dashboard"
	Lang_load  "Menu.Images"
	Lang_load  "Menu.Main"
	Lang_load  "Menu.Networks"
	Lang_load  "Menu.Others"
	Lang_load  "Menu.Searchs"
	Lang_load  "Menu.Volumes"
}
##### 函数测试 #####
# Init_Lang 


# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#
# ${1,,} : 将字符串转换为小写
# 输出帮助文档
[ "${1,,}" == '--help' ] &&  outhelp


# ----函数调用------------------------------------------------------------------------------------------#







