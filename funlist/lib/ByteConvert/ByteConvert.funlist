#!/bin/bash

##########################################################
#[FunList]
# 字节换算
# 计算机存储计量单位 的换算
# 执行环境: 宿主机
# 调用方式: ./  source  sh 
# 调用参数: 			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
#
# 备注: 静态函数列表，使用source包含在文件头部
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#


# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称: outhelp		 					  	 
# 函数功能: 帮助文档	  	  							 
# 函数参数: 			 		 	  				 
# 			 									 	 
# 返回值:  									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{			
	echo
	echo "xxxxxxxx"
	echo
	echo "先引用该文件，再调用相关函数"
	echo "source ${SCRIPT_NAME}"
	echo
	echo "FunctionName  arg1  arg2  ... "
	echo "       参数列表: "
	echo "         arg1: xxxxxx。必需"
	echo "         arg2: xxxxx。可选"
	echo  	 
	echo "示例: "
	echo "FunctionName  8.0"  
		
	return 0 2>/dev/nul
	exit 0
}


# ================================================== 
# 函数名称：ByteConvert
# 函数功能：字节换算
# 函数参数：
#     		 $1:   项目
#     		 $2:   值
#     	   [$3]:   单元值(默认1024)
#     	   [$4]:   保留小数位(默认3)
# 
# 返回值：
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功
# 		    1: 执行失败
#
# 计算机存储计量单位(小到大，每阶1024):  
# B(byte 字节) 
# KB(Kilobyte 千字节) 
# MB(Megabyte 兆字节 简称“兆”)
# GB(Gigabyte 吉字节 又称“千兆”)
# TB(Terabyte  万亿字节 太字节)
# PB(Petabyte 千万亿字节 拍字节)
# EB(Exabyte 百亿亿字节 艾字节)
# ZB
# YB
# BB
# NB
# DB
# CB
#
# 支持的项目:						 	  
#-----------------B2	
# B2KB
# B2MB
# B2GB
# B2TB
# B2PB
# B2EB
# B2ZB
# B2YB
# B2BB
# B2NB
# B2DB
# B2CB	
#-----------------KB2
# KB2B	
# KB2MB
# KB2GB
# KB2TB
# KB2PB
# KB2EB
# KB2ZB
# KB2YB
# KB2BB
# KB2NB
# KB2DB
# KB2CB
#-----------------MB2
# MB2B
# MB2KB	
# MB2GB
# MB2TB
# MB2PB
# MB2EB
# MB2ZB
# MB2YB
# MB2BB
# MB2NB
# MB2DB
# MB2CB
#-----------------GB2
# GB2B
# GB2KB
# GB2MB	
# GB2TB
# GB2PB
# GB2EB
# GB2ZB
# GB2YB
# GB2BB
# GB2NB
# GB2DB
# GB2CB
#-----------------TB2
# TB2B
# TB2KB
# TB2MB
# TB2GB	
# TB2PB
# TB2EB
# TB2ZB
# TB2YB
# TB2BB
# TB2NB
# TB2DB
# TB2CB
#-----------------PB2
# PB2B
# PB2KB
# PB2MB
# PB2GB
# PB2TB	
# PB2EB
# PB2ZB
# PB2YB
# PB2BB
# PB2NB
# PB2DB
# PB2CB
#-----------------EB2
# EB2B
# EB2KB
# EB2MB
# EB2GB
# EB2TB
# EB2PB	
# EB2ZB
# EB2YB
# EB2BB
# EB2NB
# EB2DB
# EB2CB
#-----------------ZB2
# ZB2B
# ZB2KB
# ZB2MB
# ZB2GB
# ZB2TB
# ZB2PB
# ZB2EB	
# ZB2YB
# ZB2BB
# ZB2NB
# ZB2DB
# ZB2CB
#-----------------YB2
# YB2B
# YB2KB
# YB2MB
# YB2GB
# YB2TB
# YB2PB
# YB2EB
# YB2ZB	
# YB2BB
# YB2NB
# YB2DB
# YB2CB
#-----------------BB2
# BB2B
# BB2KB
# BB2MB
# BB2GB
# BB2TB
# BB2PB
# BB2EB
# BB2ZB
# BB2YB	
# BB2NB
# BB2DB
# BB2CB
#-----------------NB2
# NB2B
# NB2KB
# NB2MB
# NB2GB
# NB2TB
# NB2PB
# NB2EB
# NB2ZB
# NB2YB
# NB2BB	
# NB2DB
# NB2CB
#-----------------DB2
# DB2B
# DB2KB
# DB2MB
# DB2GB
# DB2TB
# DB2PB
# DB2EB
# DB2ZB
# DB2YB
# DB2BB
# DB2NB	
# DB2CB
#-----------------CB2
# CB2B
# CB2KB
# CB2MB
# CB2GB
# CB2TB
# CB2PB
# CB2EB
# CB2ZB
# CB2YB
# CB2BB
# CB2NB
# CB2DB
# ================================================== 
function ByteConvert(){
	# 项目(转换为大写)
	ByteConvert_Item="${1^^}"
	# 值
	ByteConvert_Value="${2}"
	[ "${ByteConvert_Item}" == "" ] && echo "ByteConvert(): ByteConvert_Item 不能为空" && return 1
	[ "${ByteConvert_Value}" == "" ] && echo "ByteConvert(): ByteConvert_Value 不能为空" && return 1
	# 单元值
	ByteConvert_UnitValue="${3:-1024}"
	# 保留小数位
	ByteConvert_KeepNum="${4:-3}"
	ByteConvert_KeepNum="0.${ByteConvert_KeepNum}"
	
	# 设置分割符(源数据的预定义是2)	
	IFS="2"
	# 读入到数组
	ByteConvert_arr=($ByteConvert_Item)
	IFS="${oldIFS}"	
	[ "${DEBUG}" == 1 ] && echo ByteConvert_arr[0]: "${ByteConvert_arr[0]}"
	[ "${DEBUG}" == 1 ] && echo ByteConvert_arr[1]: "${ByteConvert_arr[1]}"
	
	# 字节转换
	if [ "${ByteConvert_arr[0]}" == "B" ];then
		case "${ByteConvert_Item}" in
			"B2KB")
				# 整数运算，不适用
				#ByteConvert_Result="$((${ByteConvert_Value}/${ByteConvert_UnitValue}))"
				# 浮点运算(0.3f: 保留3个小数位)
				#ByteConvert_Result=`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} '{printf("%0.3f",x/y)}'`
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"B2MB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"B2GB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"B2TB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"B2PB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"B2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"B2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			"B2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y)}'`"
				;;
			"B2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"B2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"B2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"B2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "KB" ];then
		case "${ByteConvert_Item}" in
			"KB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"KB2MB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"KB2GB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"KB2TB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"KB2PB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"KB2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"KB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"KB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			"KB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y)}'`"
				;;
			"KB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"KB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"KB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "MB" ];then
		case "${ByteConvert_Item}" in
			"MB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"MB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"MB2GB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"MB2TB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"MB2PB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"MB2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"MB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"MB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"MB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			"MB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y)}'`"
				;;
			"MB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y)}'`"
				;;
			"MB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "GB" ];then
		case "${ByteConvert_Item}" in
			"GB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"GB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"GB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"GB2TB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"GB2PB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"GB2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"GB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"GB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"GB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"GB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			"GB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y)}'`"
				;;
			"GB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "TB" ];then
		case "${ByteConvert_Item}" in
			"TB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"TB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"TB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"TB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"TB2PB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"TB2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"TB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"TB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"TB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"TB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"TB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			"TB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "PB" ];then
		case "${ByteConvert_Item}" in
			"PB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"PB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"PB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"PB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"PB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"PB2EB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"PB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"PB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"PB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"PB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"PB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			"PB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "EB" ];then
		case "${ByteConvert_Item}" in
			"EB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"EB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"EB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"EB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"EB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"EB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"EB2ZB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"EB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"EB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"EB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"EB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			"EB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "ZB" ];then
		case "${ByteConvert_Item}" in
			"ZB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"ZB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"ZB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"ZB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"ZB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"ZB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"ZB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"ZB2YB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"ZB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"ZB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"ZB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			"ZB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "YB" ];then
		case "${ByteConvert_Item}" in
			"YB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y)}'`"
				;;
			"YB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"YB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"YB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"YB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"YB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"YB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"YB2ZB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"YB2BB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"YB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"YB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			"YB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "BB" ];then
		case "${ByteConvert_Item}" in
			"BB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"BB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y)}'`"
				;;
			"BB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"BB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"BB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"BB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"BB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"BB2ZB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"BB2YB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"BB2NB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"BB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			"BB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi	
	if [ "${ByteConvert_arr[0]}" == "NB" ];then
		case "${ByteConvert_Item}" in
			"NB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"NB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"NB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y)}'`"
				;;
			"NB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"NB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"NB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"NB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"NB2ZB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"NB2YB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"NB2BB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"NB2DB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			"NB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "DB" ];then
		case "${ByteConvert_Item}" in
			"DB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"DB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"DB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"DB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y)}'`"
				;;
			"DB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"DB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"DB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"DB2ZB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"DB2YB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"DB2BB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"DB2NB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			"DB2CB")			
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x/y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	if [ "${ByteConvert_arr[0]}" == "CB" ];then
		case "${ByteConvert_Item}" in
			"CB2B")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"CB2KB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"CB2MB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"CB2GB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y*y)}'`"
				;;
			"CB2TB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y*y)}'`"
				;;
			"CB2PB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y*y)}'`"
				;;
			"CB2EB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y*y)}'`"
				;;
			"CB2ZB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y*y)}'`"
				;;
			"CB2YB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y*y)}'`"
				;;
			"CB2BB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y*y)}'`"
				;;
			"CB2NB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y*y)}'`"
				;;
			"CB2DB")				
				ByteConvert_Result="`awk -v x=${ByteConvert_Value} -v y=${ByteConvert_UnitValue} 'BEGIN{printf("%'${ByteConvert_KeepNum}'f",x*y)}'`"
				;;
			*)						
				echo '输入有误...'
				return 1
				;;
		esac
	fi
	
	# 返回结果
	[ "${ByteConvert_Result}" != "" ] && echo "${ByteConvert_Result}"
	# 清除变量
	unset ByteConvert_Item
	unset ByteConvert_Value
	unset ByteConvert_Result
	unset ByteConvert_arr
	
	return 0
}
##### 函数测试 #####
#ByteConvert "B2KB" "2008.5" "" 2
#ByteConvert "B2MB" "2048000" "" 5
#ByteConvert "B2CB" "2048000000000000000" "" 95
#ByteConvert "KB2B" "2" "" 2
#ByteConvert "PB2TB" "2" "" 2


# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#
# ${1,,} : 将字符串转换为小写
# 输出帮助文档
[ "${1,,}" == '--help' ] &&  outhelp


# ----函数调用------------------------------------------------------------------------------------------#







