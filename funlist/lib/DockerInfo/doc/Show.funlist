#!/bin/bash

# 显示参考
#------------------------------------------------------------------------------------------
# [可选字段]
# CPU:型号名称,架构, CPU核数,总线程数,一级数据缓存,一级指令缓存,二级缓存,三级缓存,是否支持64bit
# 内存:内存总数,已用内存,空闲内存,可用内存,使用率
# 硬盘:设备名称,设备类型,设备大小,设备挂载点,文件系统类型,文件系统标签,旋转设备,设备传输类型,设备供应商
# 存储:设备名称,文件系统类型,大小,已使用,可用,使用率,挂载点
# 系统:操作系统名称, 操作系统类型,内核版本,主机名,用户数量,用户列表
# 系统负载:系统启动时间,系统运行时间 ,在线用户数量,最后1分钟,最后5分钟,最后15分钟,正在运行的进程数,进程总数
# 网络:接口名称,硬件地址,IPv4,IPv6,子网掩码,网卡已开启,网线已连接,路由链 
# Docker: Docker版本,存储驱动,日志驱动,Cgroup驱动,镜像数量,容器数量,运行中的容器数量,暂停中的容器数量,停止的容器数量,CPU资源,内存资源,Docker根目录,产品协议,注册表镜像
#------------------------------------------------------------------------------------------
# [实际使用的字段]
# 系统:操作系统名称, 操作系统类型,内核版本,主机名,用户数量,用户列表
# CPU:型号名称,CPU插槽数 ,总核数,总线程数,架构,是否支持64bit
# 内存:内存总数,已用内存,空闲内存,可用内存,使用率
# 系统负载:系统启动时间,系统运行时间 ,在线用户数量,最后1分钟,最后5分钟,最后15分钟,正在运行的进程数,进程总数
#
# 网络:接口名称,硬件地址,IPv4,IPv6,子网掩码,网卡已开启,网线已连接,路由链
# 硬盘:设备名称,设备类型,设备大小,文件系统标签,旋转设备(介质类型),设备传输类型,设备挂载点
# 存储:设备名称,文件系统类型,大小,已使用,可用,使用率,挂载点
# Docker: Docker版本,存储驱动,日志驱动,Cgroup驱动,镜像数量,容器数量,运行中的容器数量,暂停中的容器数量,停止的容器数量,CPU资源,内存资源,Docker根目录,产品协议,注册表镜像
#------------------------------------------------------------------------------------------
source funlist/lib/ByteConvert/ByteConvert.funlist
source funlist/lib/RepeatStr/RepeatStr.funlist
source funlist/lib/SysInfo/sysinfo.sh
source funlist/lib/DockerInfo/Docker.info.funlist
DOCKERINFO_FUN_Docker


echo -e '\033[5;47;30m[系统]\033[0m'
echo -e '\033[1;37m操作系统: \033[0m'${SYSINFO_VAR_Software_System_OSName}
echo -e '\033[1;37m系统类型: \033[0m'${SYSINFO_VAR_Software_System_OSType}
echo -e '\033[1;37m内核版本: \033[0m'${SYSINFO_VAR_Software_System_CoreVersion}
echo -e '\033[1;37m  主机名: \033[0m'${SYSINFO_VAR_Software_System_HostName}
echo -e '\033[1;37m    用户: \033[0m'${SYSINFO_VAR_Software_System_Users}'('${SYSINFO_VAR_Software_System_UserList[0]}')'

echo
echo -e '\033[5;47;30m[CPU]\033[0m'
echo -e '\033[1;37m    型号: \033[0m'${SYSINFO_VAR_Hardware_CPU_ModelName}
TotalCores="$((${SYSINFO_VAR_Hardware_CPU_Sockets}*${SYSINFO_VAR_Hardware_CPU_CoresPerSocket}))"
echo -e '\033[1;37m    参数: \033[0m'${SYSINFO_VAR_Hardware_CPU_Sockets}' 插槽(s), '${TotalCores}' 核数(s), '${SYSINFO_VAR_Hardware_CPU_CPUs}' 线程(s)'
echo -e '\033[1;37m    主频: \033[0m'${SYSINFO_VAR_Hardware_CPU_MHz}'MHz'
echo -e '\033[1;37m    架构: \033[0m'${SYSINFO_VAR_Hardware_CPU_Architecture}
echo -e '\033[1;37m    64位: \033[0m'`[ "${SYSINFO_VAR_Hardware_CPU_is64bit}" == "1" ] && echo 'true' || echo 'false'`

echo
echo -e '\033[5;47;30m[内存]\033[0m'
# echo -e '\033[1;37m    总量: \033[0m'`echo $((${SYSINFO_VAR_Software_Memory_Total}/1024))`' MB'
# echo -e '\033[1;37m    已用: \033[0m'${SYSINFO_VAR_Software_Memory_Used}'('${SYSINFO_VAR_Software_Memory_UsePercent}')'
# echo -e '\033[1;37m    空闲: \033[0m'${SYSINFO_VAR_Software_Memory_Free}
# echo -e '\033[1;37m    可用: \033[0m'${SYSINFO_VAR_Software_Memory_Available}
echo -e '\033[1;37m    总量: \033[0m'`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Memory_Total}" "1024"  2`' GB'
echo -e '\033[1;37m    已用: \033[0m'`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Memory_Used}" "1024"  2`' GB('${SYSINFO_VAR_Software_Memory_UsePercent}')'
echo -e '\033[1;37m    空闲: \033[0m'`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Memory_Free}" "1024"  2`' GB'
echo -e '\033[1;37m    可用: \033[0m'`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Memory_Available}" "1024"  2`' GB'

echo
echo -e '\033[5;47;30m[系统负载]\033[0m'
echo -e '\033[1;37m启动时间: \033[0m'${SYSINFO_VAR_Software_Loadavg_UpTime}
echo -e '\033[1;37m运行时间: \033[0m'${SYSINFO_VAR_Software_Loadavg_RunTime[1]}
echo -e '\033[1;37m在线用户: \033[0m'${SYSINFO_VAR_Software_Loadavg_OnlineUsers}
echo -e '\033[1;37m    进程: \033[0m'${SYSINFO_VAR_Software_Loadavg_ProcessRunning}/${SYSINFO_VAR_Software_Loadavg_ProcessTotal}
echo -e '\033[1;37m  负载率: \033[0m'${SYSINFO_VAR_Software_Loadavg_1Minutes},${SYSINFO_VAR_Software_Loadavg_5Minutes},${SYSINFO_VAR_Software_Loadavg_15Minutes}

echo
echo -e '\033[5;47;30m[网络]\033[0m'
# 样式一
printf "\033[1;37m%-26s %-17s %-28s %-21s %-24s %-10s %-10s\n\033[0m" '接口名称'  'IPv4'   'IPv6'   '子网掩码'  '硬件地址'  '已开启'  '已连接'
index=0
for a in ${SYSINFO_VAR_Software_Network_InterfaceName[@]}
do
	isUp="`[ "${SYSINFO_VAR_Software_Network_Up[${index}]}" == "1" ] && echo -e '\033[1;32mtrue\033[0m' || echo -e '\033[1;31mfalse\033[0m'`"
	isConnected="`[ "${SYSINFO_VAR_Software_Network_Connected[${index}]}" == "1" ] && echo -e '\033[1;32mtrue\033[0m' || echo -e '\033[1;31mfalse\033[0m'`"
	#printf "%-22s %-17s %-28s %-17s %-20s %-7s %-5s\n"  "br-79f6f0e6dc970e6dc"  "111.111.111.111"  "fe80::42:e2ff:fe19:ff3a/64"  "255.255.255.255"  "02:42:e2:19:ff:3a"  "true" "false"
	printf "%-22s %-17s %-28s %-17s %-20s %-18s %-10s\n"  "${a}"  "${SYSINFO_VAR_Software_Network_IPv4[${index}]}"  "${SYSINFO_VAR_Software_Network_IPv6[${index}]}"  "${SYSINFO_VAR_Software_Network_Mask[${index}]}"  "${SYSINFO_VAR_Software_Network_Mac[${index}]}"  "${isUp}" "${isConnected}"
	let index++
done

# # 样式二
# index=0
# for a in ${SYSINFO_VAR_Software_Network_InterfaceName[@]}
# do
	# isUp="`[ "${SYSINFO_VAR_Software_Network_Up[${index}]}" == "1" ] && echo -e '\033[1;32mtrue\033[0m' || echo -e '\033[1;31mfalse\033[0m'`"
	# isConnected="`[ "${SYSINFO_VAR_Software_Network_Connected[${index}]}" == "1" ] && echo -e '\033[1;32mtrue\033[0m' || echo -e '\033[1;31mfalse\033[0m'`"
	# echo -e '\033[1;33m'${a}'\033[0m'
	# echo -e '\033[1;37m    IPv4: \033[0m'${SYSINFO_VAR_Software_Network_IPv4[${index}]}
	# echo -e '\033[1;37m    IPv6: \033[0m'${SYSINFO_VAR_Software_Network_IPv6[${index}]}
	# echo -e '\033[1;37m子网掩码: \033[0m'${SYSINFO_VAR_Software_Network_Mask[${index}]}
	# echo -e '\033[1;37m硬件地址: \033[0m'${SYSINFO_VAR_Software_Network_Mac[${index}]}
	# echo -e '\033[1;37m  已开启: \033[0m'${isUp}
	# echo -e '\033[1;37m  已连接: \033[0m'${isConnected}
	# echo
	# let index++
# done

echo
echo -e '\033[1;37m路由链:\033[0m'
echo -e '\033[1;37m接口(本地源IP)<==>网关<==>目标网络或主机(目标掩码)[:标志]\033[0m'
for a in ${SYSINFO_VAR_Software_Network_Route_Links[@]}
do
	echo ${a}
done

echo
echo -e '\033[5;47;30m[硬盘]\033[0m'
# 样式一
printf "\033[1;37m%-10s %-10s %-12s %-10s %-10s %-22s %-20s\n\033[0m"  '名称'  '类型'  '大小'  '介质'  '传输'  '标签'  '挂载点'   
index=0
for a in ${SYSINFO_VAR_Hardware_HardDisk_Name[@]}
do
	RotaStr="`[ "${SYSINFO_VAR_Hardware_HardDisk_Rota[${index}]}" == "1" ] && echo 'hdd' || echo 'ssd'`"
	#printf "%-8s %-8s %-10s %-8s %-8s %-20s %-20s\n"  "sda111"  "disk"   "169.9M"   "ssd"    "sata"  "boot2docker-data"  "/mnt/sda1"
	printf "%-8s %-8s %-10s %-8s %-8s %-20s %-20s\n"  "${a}"  "${SYSINFO_VAR_Hardware_HardDisk_Type[${index}]}"   "${SYSINFO_VAR_Hardware_HardDisk_Size[${index}]}"   "${RotaStr}"    "${SYSINFO_VAR_Hardware_HardDisk_Tran[${index}]}"  "${SYSINFO_VAR_Hardware_HardDisk_Label[${index}]}" "${SYSINFO_VAR_Hardware_HardDisk_MountPoint[${index}]}"	
	let index++
done

# # 样式二
# index=0
# for a in ${SYSINFO_VAR_Hardware_HardDisk_Name[@]}
# do
	# RotaStr="`[ "${SYSINFO_VAR_Hardware_HardDisk_Rota[${index}]}" == "1" ] && echo 'hdd' || echo 'ssd'`"
	# echo -e '\033[1;33m'${a}'\033[0m'
	# echo -e '\033[1;37m  类型: \033[0m'${SYSINFO_VAR_Hardware_HardDisk_Type[${index}]}
	# echo -e '\033[1;37m  大小: \033[0m'${SYSINFO_VAR_Hardware_HardDisk_Size[${index}]}
	# echo -e '\033[1;37m  介质: \033[0m'${RotaStr}
	# echo -e '\033[1;37m  传输: \033[0m'${SYSINFO_VAR_Hardware_HardDisk_Tran[${index}]}
	# echo -e '\033[1;37m  标签: \033[0m'${SYSINFO_VAR_Hardware_HardDisk_Label[${index}]}
	# echo -e '\033[1;37m挂载点: \033[0m'${SYSINFO_VAR_Hardware_HardDisk_MountPoint[${index}]}
	# echo
	# let index++
# done


echo
echo -e '\033[5;47;30m[存储]\033[0m'
# 样式一
printf "\033[1;37m%-38s %-14s %-17s %-17s %-17s %-20s\n\033[0m"  '名称'  '文件系统'  '大小'  '已用'  '可用'  '使用率'  
index=0
for a in ${SYSINFO_VAR_Software_Storage_Name[@]}
do	
	Storage_Size="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Size[${index}]}" "1024"  2`GB"
	Storage_Used="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Used[${index}]}" "1024"  2`GB"
	Storage_Available="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Available[${index}]}" "1024"  2`GB"
	#printf "%-36s %-10s %-15s %-15s %-15s %-5s\n"   "/mnt/f_CodeWorkSpacef_CodeWorkSpace" "overlay"  "117224444"   "8410380" "108814064"   "100%"	
	printf "%-36s %-10s %-15s %-15s %-15s %-5s\n"   "${a}" "${SYSINFO_VAR_Software_Storage_Type[${index}]}"  "${Storage_Size}"   "${Storage_Used}" "${Storage_Available}"   "${SYSINFO_VAR_Software_Storage_UsePercent[${index}]}"	
	echo -e '\033[1;37m└挂载点: \033[0m'${SYSINFO_VAR_Software_Storage_MountedOn[${index}]}
	echo 
	let index++
done

# 样式二
# index=0
# for a in ${SYSINFO_VAR_Software_Storage_Name[@]}
# do	
	# Storage_Size="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Size[${index}]}" "1024"  2`GB"
	# Storage_Used="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Used[${index}]}" "1024"  2`GB"
	# Storage_Available="`ByteConvert "KB2GB" "${SYSINFO_VAR_Software_Storage_Available[${index}]}" "1024"  2`GB"	
	# echo -e '\033[1;33m'${a}'\033[0m'
	# echo -e '\033[1;37m    大小: \033[0m'${Storage_Size}
	# echo -e '\033[1;37m    已用: \033[0m'${Storage_Used}
	# echo -e '\033[1;37m    可用: \033[0m'${Storage_Available}
	# echo -e '\033[1;37m  使用率: \033[0m'${SYSINFO_VAR_Software_Storage_UsePercent[${index}]}
	# echo -e '\033[1;37m文件系统: \033[0m'${SYSINFO_VAR_Software_Storage_Type[${index}]}
	# echo -e '\033[1;37m  挂载点: \033[0m'${SYSINFO_VAR_Software_Storage_MountedOn[${index}]}
	# echo 
	# let index++
# done

	
# echo '--------------------------------------------------------------------------'
RepeatStr "-" "" "" "1"
echo -e '\033[5;47;30m[Docker]\033[0m'
echo -e '\033[1;37m      镜像: \033[0m'${DOCKERINFO_VAR_System_Images}
echo -e '\033[1;37m      容器: \033[0m'${DOCKERINFO_VAR_System_Containers}'(运行:'${DOCKERINFO_VAR_System_Running}'/暂停:'${DOCKERINFO_VAR_System_Paused}'/停止:'${DOCKERINFO_VAR_System_Stopped}')'
echo -e '\033[1;37m   CPU资源: \033[0m'${DOCKERINFO_VAR_System_CPUs}
echo -e '\033[1;37m  内存资源: \033[0m'${DOCKERINFO_VAR_System_TotalMemory}
echo -e '\033[1;37mDocker版本: \033[0m'${DOCKERINFO_VAR_System_ServerVersion}
echo -e '\033[1;37m    根目录: \033[0m'${DOCKERINFO_VAR_System_DockerRootDir}
echo -e '\033[1;37m  存储驱动: \033[0m'${DOCKERINFO_VAR_System_StorageDriver}
echo -e '\033[1;37m  日志驱动: \033[0m'${DOCKERINFO_VAR_System_LoggingDriver}
echo -e '\033[1;37mCgroup驱动: \033[0m'${DOCKERINFO_VAR_System_CgroupDriver}
echo -e '\033[1;37m  产品协议: \033[0m'${DOCKERINFO_VAR_System_ProductLicense}
echo -e '\033[1;37m注册表镜像: \033[0m'
for a in ${DOCKERINFO_VAR_System_RegistryMirrors[@]}
do
	echo ${a}
done
