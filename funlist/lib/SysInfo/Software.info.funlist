#!/bin/bash

##########################################################
#[FunList]
# 软件基本信息
# 
# 执行环境: 宿主机
# 调用方式: ./  source  sh 
# 调用参数: 			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
#
# 备注: 静态函数列表，使用source包含在文件头部
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#


# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称: outhelp		 					  	 
# 函数功能: 帮助文档	  	  							 
# 函数参数: 			 		 	  				 
# 			 									 	 
# 返回值:  									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{			
	echo
	echo "xxxxxxxx"
	echo
	echo "先引用该文件，再调用相关函数"
	echo "source ${SCRIPT_NAME}"
	echo
	echo "FunctionName  arg1  arg2  ... "
	echo "       参数列表: "
	echo "         arg1: xxxxxx。必需"
	echo "         arg2: xxxxx。可选"
	echo  	 
	echo "示例: "
	echo "FunctionName  8.0"  
		
	return 0 2>/dev/nul
	exit 0
}

# ================================================== 
# 函数名称: TTT		 					  	 
# 函数功能:  			 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:			 									 	  
# 		${Var}: 其它							  
# ================================================== 
function TTT() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 命令结果
	CmdResult="`lscpu`"
	# awk程序文件
	MAP_SET 1
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	ProgramFile="${ScriptDir}/${FUNCNAME[0]}.awk"
	
	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"		
	fi
	# 设置变量
	eval `echo "$CmdResult" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile}`
		
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult
	unset ProgramFile
	
	return 0
}
##### 函数测试 #####
# TTT
# echo '架构:' $SYSINFO_VAR_Hardware_CPU_Architecture
# echo '型号名称:' $SYSINFO_VAR_Hardware_CPU_ModelName
#
#TTT  "/tmp/"
#cat /tmp/TTT.sh


# ================================================== 
# 函数名称: SYSINFO_FUN_Software_System		 					  	 
# 函数功能: 获取系统信息	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:			 									 	  
# 	${SYSINFO_VAR_Software_System_OSName}       : 操作系统名称
# 	${SYSINFO_VAR_Software_System_OSType}       : 操作系统类型
# 	${SYSINFO_VAR_Software_System_Architecture} : 架构
# 	${SYSINFO_VAR_Software_System_CoreName}     : 内核名称
# 	${SYSINFO_VAR_Software_System_CoreVersion}  : 内核版本
# 	${SYSINFO_VAR_Software_System_HostName}     : 主机名
# 	${SYSINFO_VAR_Software_System_Users}        : 用户数量
# 	${SYSINFO_VAR_Software_System_UserList[0]}  : 用户列表
#                                         [0]   : 逗号分隔存储的列表。其它下标为单个值
# 	${SYSINFO_VAR_Software_System_Groups}       : 组数量
# 	${SYSINFO_VAR_Software_System_GroupList[0]} : 组列表
#                                          [0]  : 逗号分隔存储的列表。其它下标为单个值							  
# ================================================== 
function SYSINFO_FUN_Software_System() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 命令结果
	CmdResult_01="`uname -osmrn`"
	CmdResult_02="`cut -d: -f1 /etc/passwd`"
	CmdResult_03="`cut -d: -f1 /etc/group`"
	# awk程序文件
	MAP_SET 1
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	ProgramFile_01="${ScriptDir}/${FUNCNAME[0]}_01.awk"
	ProgramFile_02="${ScriptDir}/${FUNCNAME[0]}_02.awk"
	ProgramFile_03="${ScriptDir}/${FUNCNAME[0]}_03.awk"

	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"		
	fi
	# 设置变量
	eval `echo "$CmdResult_01" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile_01}`
	eval `echo "$CmdResult_02" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile_02}`
	eval `echo "$CmdResult_03" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile_03}`
		
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult_01
	unset CmdResult_02
	unset CmdResult_03
	unset ProgramFile_01
	unset ProgramFile_02
	unset ProgramFile_03
	
	return 0
}
##### 函数测试 #####
# SYSINFO_FUN_Software_System
# echo '操作系统名称:' ${SYSINFO_VAR_Software_System_OSName}
# echo '用户列表:' ${SYSINFO_VAR_Software_System_UserList[0]}
#
# SYSINFO_FUN_Software_System  "/tmp/"
# cat /tmp/SYSINFO_FUN_Software_System.sh

# ================================================== 
# 函数名称: SYSINFO_FUN_Software_Storage		 					  	 
# 函数功能: 获取存储信息	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:			 									 	  
# 	${SYSINFO_VAR_Software_Storage_Name[0]} : 设备名称
# 	${SYSINFO_VAR_Software_Storage_Type[0]} : 文件系统类型
# 	${SYSINFO_VAR_Software_Storage_Size[0]} : 大小
# 	${SYSINFO_VAR_Software_Storage_Used[0]} : 已使用
# 	${SYSINFO_VAR_Software_Storage_Available[0]}  : 可用
# 	${SYSINFO_VAR_Software_Storage_UsePercent[0]} : 使用率
# 	${SYSINFO_VAR_Software_Storage_MountedOn[0]}  : 挂载点							  
# ================================================== 
function SYSINFO_FUN_Software_Storage() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 命令结果
	CmdResult="`df -Tk | grep -v "Use%"`"
	# awk程序文件
	MAP_SET 1
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	ProgramFile="${ScriptDir}/${FUNCNAME[0]}.awk"
	
	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"		
	fi
	# 设置变量
	eval `echo "$CmdResult" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile}`
		
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult
	unset ProgramFile
	
	return 0
}
##### 函数测试 #####
# SYSINFO_FUN_Software_Storage
# echo '设备:' ${SYSINFO_VAR_Software_Storage_Name[0]}
# echo '挂载点:' ${SYSINFO_VAR_Software_Storage_MountedOn[0]}
#
# SYSINFO_FUN_Software_Storage  "/tmp/"
# cat /tmp/SYSINFO_FUN_Software_Storage.sh

# ================================================== 
# 函数名称: SYSINFO_FUN_Software_Memory		 					  	 
# 函数功能: 获取内存信息	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:			 									 	  
# 	${SYSINFO_VAR_Software_Memory_Total}      : 内存总数
# 	${SYSINFO_VAR_Software_Memory_Used}       : 已用内存
# 	${SYSINFO_VAR_Software_Memory_Free}       : 空闲内存
# 	${SYSINFO_VAR_Software_Memory_Available}  : 可用内存
# 	${SYSINFO_VAR_Software_Memory_UsePercent} : 使用率							  
# ================================================== 
function SYSINFO_FUN_Software_Memory() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 命令结果
	CmdResult="`free -k | grep "Mem"`"
	# awk程序文件
	MAP_SET 1
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	ProgramFile="${ScriptDir}/${FUNCNAME[0]}.awk"
	
	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"		
	fi
	# 设置变量
	eval `echo "$CmdResult" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile}`
		
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult
	unset ProgramFile
	
	return 0
}
##### 函数测试 #####
# SYSINFO_FUN_Software_Memory
# echo '内存总数:' ${SYSINFO_VAR_Software_Memory_Total}
# echo '已用内存:' ${SYSINFO_VAR_Software_Memory_Used}
# echo '使用率:' ${SYSINFO_VAR_Software_Memory_UsePercent}
#
# SYSINFO_FUN_Software_Memory  "/tmp/"
# cat /tmp/SYSINFO_FUN_Software_Memory.sh

# ================================================== 
# 函数名称: SYSINFO_FUN_Software_Loadavg	 					  	 
# 函数功能: 系统负载	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:			 									 	  
# 	${SYSINFO_VAR_Software_Loadavg_UpTime}     : 系统启动时间 
# 	${SYSINFO_VAR_Software_Loadavg_RunTime[0]} : 系统运行时间(秒)
# 	${SYSINFO_VAR_Software_Loadavg_RunTime[1]} : 系统运行时间，格式：12天 5时 38分 4秒
# 	${SYSINFO_VAR_Software_Loadavg_RunTime[2]} : 系统运行时间，格式：12Days 5Hours 38Minutes 4Seconds
# 	${SYSINFO_VAR_Software_Loadavg_RunTime[3]} : 系统运行时间，格式：12d.5:38:4
# 	${SYSINFO_VAR_Software_Loadavg_RunTime[4]} : 系统运行时间，格式：12.5:38:4 
# 	${SYSINFO_VAR_Software_Loadavg_OnlineUsers}  : 在线用户数量
# 	${SYSINFO_VAR_Software_Loadavg_1Minutes}     : 最后1分钟的CPU和IO利用率
# 	${SYSINFO_VAR_Software_Loadavg_5Minutes}     : 最后5分钟的CPU和IO利用率  
# 	${SYSINFO_VAR_Software_Loadavg_15Minutes}    : 最后15分钟的CPU和IO利用率
# 	${SYSINFO_VAR_Software_Loadavg_ProcessRunning}  : 正在运行的进程数  
# 	${SYSINFO_VAR_Software_Loadavg_ProcessTotal}    : 进程总数  							  
# ================================================== 
function SYSINFO_FUN_Software_Loadavg() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 命令结果
	CmdResult_01="`uptime`"
	CmdResult_02="`cat /proc/loadavg`"		
	
	# 设置变量
	SYSINFO_VAR_Software_Loadavg_UpTime="`uptime -s`" #系统启动时间
	#SYSINFO_VAR_Software_Loadavg_RunTime[i]= #系统运行时间<已在下文awk中实现>
	SYSINFO_VAR_Software_Loadavg_OnlineUsers="`echo "$CmdResult_01" | cut -d ',' -f 3 | sed 's/^[ \t]*//g' | cut -d ' ' -f 1`" #在线用户数量 
	SYSINFO_VAR_Software_Loadavg_1Minutes="`echo "$CmdResult_02" | cut -d ' ' -f 1`"  #最后1分钟的CPU和IO利用率 
	SYSINFO_VAR_Software_Loadavg_5Minutes="`echo "$CmdResult_02" | cut -d ' ' -f 2`"  #最后5分钟的CPU和IO利用率
	SYSINFO_VAR_Software_Loadavg_15Minutes="`echo "$CmdResult_02" | cut -d ' ' -f 3`" #最后15分钟的CPU和IO利用率 
	SYSINFO_VAR_Software_Loadavg_ProcessRunning="`echo "$CmdResult_02" | cut -d ' ' -f 4 | cut -d '/' -f 1`" #正在运行的进程数
	SYSINFO_VAR_Software_Loadavg_ProcessTotal="`echo "$CmdResult_02" | cut -d ' ' -f 4 | cut -d '/' -f 2`" #进程总数 
	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"
		echo "#!/bin/bash">"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_UpTime=\"${SYSINFO_VAR_Software_Loadavg_UpTime}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_OnlineUsers=\"${SYSINFO_VAR_Software_Loadavg_OnlineUsers}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_1Minutes=\"${SYSINFO_VAR_Software_Loadavg_1Minutes}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_5Minutes=\"${SYSINFO_VAR_Software_Loadavg_5Minutes}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_15Minutes=\"${SYSINFO_VAR_Software_Loadavg_15Minutes}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_ProcessRunning=\"${SYSINFO_VAR_Software_Loadavg_ProcessRunning}\"">>"${CacheFile}"
		echo "SYSINFO_VAR_Software_Loadavg_ProcessTotal=\"${SYSINFO_VAR_Software_Loadavg_ProcessTotal}\"">>"${CacheFile}"
	fi
	eval `cat /proc/uptime | awk -v OutFile="${CacheFile}" -F "." '{ 
		run_days=$1/86400;
		run_hour=($1%86400)/3600;
		run_minute=($1%3600)/60;
		run_second=$1%60;		
		
		# %d:打印十进制整数
		#printf("\n系统已运行：%d天 %d时 %d分 %d秒",run_days,run_hour,run_minute,run_second) # 12天 5时 38分 4秒 
		#printf("\n系统已运行：%dDays %dHours %dMinutes %dSeconds",run_days,run_hour,run_minute,run_second) # 12Days 5Hours 38Minutes 4Seconds
		#printf("\n系统已运行：%dd.%d:%d:%d",run_days,run_hour,run_minute,run_second) # 12d.5:38:4
		#printf("\n系统已运行：%d.%d:%d:%d",run_days,run_hour,run_minute,run_second)  # 12.5:38:4 		
		
		# sprintf(format, expression1, …) : 返回(不打印)printf用相同参数打印出来的字符串。
		#                                   参阅：[9.1.3字符串操作函数](https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html#String-Functions)	
		t1=sprintf("%d天 %d时 %d分 %d秒",run_days,run_hour,run_minute,run_second) # 12天 5时 38分 4秒 
		t2=sprintf("%dDays %dHours %dMinutes %dSeconds",run_days,run_hour,run_minute,run_second); # 12Days 5Hours 38Minutes 4Seconds
		t3=sprintf("%dd.%d:%d:%d",run_days,run_hour,run_minute,run_second); # 12d.5:38:4
		t4=sprintf("%d.%d:%d:%d",run_days,run_hour,run_minute,run_second);  # 12.5:38:4 
		# 输出
		print "SYSINFO_VAR_Software_Loadavg_RunTime[0]=\""$1"\""; # 系统运行时间(秒)
		print "SYSINFO_VAR_Software_Loadavg_RunTime[1]=\""t1"\""; # 12天 5时 38分 4秒 
		print "SYSINFO_VAR_Software_Loadavg_RunTime[2]=\""t2"\""; # 12Days 5Hours 38Minutes 4Seconds
		print "SYSINFO_VAR_Software_Loadavg_RunTime[3]=\""t3"\""; # 12d.5:38:4
		print "SYSINFO_VAR_Software_Loadavg_RunTime[4]=\""t4"\""; # 12.5:38:4 
		# =>输出到文件
		if(OutFile != "") {
			print "SYSINFO_VAR_Software_Loadavg_RunTime[0]=\""$1"\"" >> OutFile
			print "SYSINFO_VAR_Software_Loadavg_RunTime[1]=\""t1"\"" >> OutFile
			print "SYSINFO_VAR_Software_Loadavg_RunTime[2]=\""t2"\"" >> OutFile
			print "SYSINFO_VAR_Software_Loadavg_RunTime[3]=\""t3"\"" >> OutFile
			print "SYSINFO_VAR_Software_Loadavg_RunTime[4]=\""t4"\"" >> OutFile
		}
	}'`
	
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult_01
	unset CmdResult_02	
	
	return 0
}
##### 函数测试 #####
# SYSINFO_FUN_Software_Loadavg
# echo '系统启动时间:' $SYSINFO_VAR_Software_Loadavg_UpTime
# echo '系统运行时间:' ${SYSINFO_VAR_Software_Loadavg_RunTime[1]}
# echo '进程总数:' $SYSINFO_VAR_Software_Loadavg_ProcessTotal
#
# SYSINFO_FUN_Software_Loadavg  "/tmp/"
# cat /tmp/SYSINFO_FUN_Software_Loadavg.sh

# ================================================== 
# 函数名称: SYSINFO_FUN_Software_Network		 					  	 
# 函数功能: 获取网络信息	  	  							 
# 函数参数: 			 		 	  				 
#     	   [$1]:   缓存目录(如 /tmp/cache/)		      	 
#     	   [$2]:   使用ifconfig(1:是|0:否<默认>)		      	 
# 			 									 	 
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 									 	  
# 变量列表:	
# 注意： `<InterfaceName>` 中间的`-`已被替换为空。如 `br-79f6f0e6dc97` => `br79f6f0e6dc97`		 									 	  
# 	${SYSINFO_VAR_Software_Network_InterfaceName[0]}  : 接口名称
# 	${SYSINFO_VAR_Software_Network_LinkType[0]}   : 链接类型
#    	${SYSINFO_VAR_Software_Network_LinkType_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Mac[0]}        : 硬件(mac)地址
#    	${SYSINFO_VAR_Software_Network_Mac_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_IPv4[0]}       : IPv4
#    	${SYSINFO_VAR_Software_Network_IPv4_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_IPv6[0]}       : IPv6
#    	${SYSINFO_VAR_Software_Network_IPv6_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Bcast[0]}      : 广播地址
#    	${SYSINFO_VAR_Software_Network_Bcast_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Mask[0]}       : 子网掩码
#    	${SYSINFO_VAR_Software_Network_Mask_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_IPv4Scope[0]}  : IPv4范围
#    	${SYSINFO_VAR_Software_Network_IPv4Scope_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_IPv6Scope[0]}  : IPv6范围
#    	${SYSINFO_VAR_Software_Network_IPv6Scope_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Up[0]}         : 网卡已开启(1:是|0:否)
#    	${SYSINFO_VAR_Software_Network_Up_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Connected[0]}  : 网线已连接(1:是|0:否)
#    	${SYSINFO_VAR_Software_Network_Connected_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Multicast[0]}  : 支持多播(1:是|0:否)
#    	${SYSINFO_VAR_Software_Network_Multicast_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_MTU[0]}        : 最大传输单元
#    	${SYSINFO_VAR_Software_Network_MTU_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Broadcast[0]}  : 支持广播(1:是|0:否)
#    	${SYSINFO_VAR_Software_Network_Broadcast_<InterfaceName>}
# 	${SYSINFO_VAR_Software_Network_Loopback[0]}   : 回环接口(1:是|0:否)
#    	${SYSINFO_VAR_Software_Network_Loopback_<InterfaceName>}	
# 	${SYSINFO_VAR_Software_Network_Route_Destination[0]}  : 目标网络或主机
# 	${SYSINFO_VAR_Software_Network_Route_Genmask[0]}      : 目标掩码
# 	${SYSINFO_VAR_Software_Network_Route_Gateway[0]}      : 网关
# 	${SYSINFO_VAR_Software_Network_Route_Iface[0]}        : 接口名称
# 	${SYSINFO_VAR_Software_Network_Route_Flags[0]}        : 标志 :  特定于 `route`
# 	${SYSINFO_VAR_Software_Network_Route_Src[0]}          : 本地源IP :  特定于 `ip route`
# 	${SYSINFO_VAR_Software_Network_Route_Links[0]}        : 路由链
#特定于ip命令的变量
# 	${SYSINFO_VAR_Software_Network_Pointopoint[0]}  : 点对点通讯(1:是|0:否) 
#    	${SYSINFO_VAR_Software_Network_Pointopoint_<InterfaceName>}  
# 	${SYSINFO_VAR_Software_Network_Promisc[0]}      : 监听所有流量(1:是|0:否) 
#    	${SYSINFO_VAR_Software_Network_Promisc_<InterfaceName>} 
# 	${SYSINFO_VAR_Software_Network_Allmulti[0]}     : 接收所有多播数据包(1:是|0:否) 
#    	${SYSINFO_VAR_Software_Network_Allmulti_<InterfaceName>} 
# 	${SYSINFO_VAR_Software_Network_Dynamic[0]}      : 动态接口(1:是|0:否) 
#    	${SYSINFO_VAR_Software_Network_Dynamic_<InterfaceName>} 
#特定于ip命令的动态变量
#key: qdisc,state,group,qlen,master
# 	${SYSINFO_VAR_Software_Network_<key>[0]}         : 动态接口(1:是|0:否) 
#    	${SYSINFO_VAR_Software_Network_<key>_<InterfaceName>} 
# ================================================== 
function SYSINFO_FUN_Software_Network() {			
	# ${FUNCNAME[0]} : 当前函数名
	
	# 缓存目录(/tmp/cache/)
	CacheDir="${1:-}"
	# 使用ifconfig命令
	useIfconfig="${2:-0}"
	# -z : 是否为空，为空则为true
	if [ -z `which ip` ]; then
	   #echo "命令未安装"	  
	   is_ip=false
	else 
	   #echo "命令已安装"
	   is_ip=true
	fi
	if [ -z `which route` ]; then
	   #echo "命令未安装"	  
	   is_route=false
	else 
	   #echo "命令已安装"
	   is_route=true
	fi
	if [ -z `which ifconfig` ]; then
	   #echo "命令未安装"	  
	   is_ifconfig=false
	else 
	   #echo "命令已安装"
	   is_ifconfig=true
	fi	
	# 使用ip命令 
	[ "${is_ip}" == "true" ] && useIp=1 || useIp=0
	[ "${useIfconfig}" == "1" ] && useIp=0 || useIp=1
	
	MAP_SET 1
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	
	if [ "${useIp}" == "1" ];then
		# 命令结果
		CmdResult="`ip route show`"
		# awk程序文件
		ProgramFile="${ScriptDir}/${FUNCNAME[0]}_iproute.awk"
	else
		# 命令结果
		CmdResult="`route -n | grep -v "Kernel IP routing table" | grep -v "Destination"`"
		# awk程序文件
		ProgramFile="${ScriptDir}/${FUNCNAME[0]}_route.awk"
	fi
	
	# 网络接口名称 列表
	[ "${useIp}" == "1" ] &&  ip address show up | grep -w "mtu" | cut -d ":" -f 2  | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | cut -d "@" -f 1  >/tmp/NetworkInterfaceName.list
	[ "${useIp}" == "0" ] &&  ifconfig | grep -w  "Link encap" | awk '{print $1}' >/tmp/NetworkInterfaceName.list	
		
	# 输出数据到文件	
	if [ "${CacheDir}" != "" ];then
		CacheFile="${CacheDir}${FUNCNAME[0]}.sh"	
		echo "#!/bin/bash">"${CacheFile}"
	fi

	# 设置变量
	eval `echo "$CmdResult" |  awk -v OutFile="${CacheFile}" -f ${ProgramFile}`
	
	i=0	
	if [ "${useIp}" == "1" ];then
		while read -r line1
		do				
			line2="`echo ${line1} | sed 's/-//g'`" # - 替换为空
			eval `ip address show ${line1} | awk -v OutFile="${CacheFile}" -v idx=${i} -v iName="${line2}" -f ${ScriptDir}/${FUNCNAME[0]}_ipaddress.awk`
			let i++	
		done < /tmp/NetworkInterfaceName.list
	else
		while read -r line1
		do	
			line2="`echo ${line1} | sed 's/-//g'`" # - 替换为空
			eval `ifconfig ${line1} | awk -v OutFile="${CacheFile}" -v idx=${i} -v iName="${line2}" -f ${ScriptDir}/${FUNCNAME[0]}_ifconfig.awk`
			let i++
		done < /tmp/NetworkInterfaceName.list
	fi	
		
	# 清除变量
	unset CacheDir
	unset CacheFile
	unset CmdResult
	unset ProgramFile
	unset useIfconfig
	unset is_ip
	unset is_route
	unset is_ifconfig
	unset useIp
	
	return 0
}
##### 函数测试 #####
# SYSINFO_FUN_Software_Network
# echo '接口名称:' ${SYSINFO_VAR_Software_Network_InterfaceName[3]}
# echo '硬件地址:' ${SYSINFO_VAR_Software_Network_Mac[0]}
# echo 'MTU:' ${SYSINFO_VAR_Software_Network_MTU[0]}
# echo '动态接口:' ${SYSINFO_VAR_Software_Network_Dynamic[0]}
# echo '目标网络或主机:' ${SYSINFO_VAR_Software_Network_Route_Destination[0]}
# echo '路由链:' ${SYSINFO_VAR_Software_Network_Route_Links[0]}
#
# SYSINFO_FUN_Software_Network  "/tmp/"
# cat /tmp/SYSINFO_FUN_Software_Network.sh




# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#
# ${1,,} : 将字符串转换为小写
# 输出帮助文档
[ "${1,,}" == '--help' ] &&  outhelp


# ----函数调用------------------------------------------------------------------------------------------#







