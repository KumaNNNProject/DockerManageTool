#!/bin/bash

##########################################################
#[FunList]
# [简述]
# 
# 执行环境：宿主机
# 调用方式：./  source  sh 
# 调用参数：			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
#
# 备注：静态函数列表，使用source包含在文件头部
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#


# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称：outhelp		 					  	 
# 函数功能：帮助文档	  	  							 
# 函数参数：			 		 	  				 
# 			 									 	 
# 返回值： 									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{			
	echo
	echo "xxxxxxxx"
	echo
	echo "先引用该文件，再调用相关函数"
	echo "source ${SCRIPT_NAME}"
	echo
	echo "FunctionName  arg1  arg2  ... "
	echo "       参数列表："
	echo "         arg1：xxxxxx。必需"
	echo "         arg2：xxxxx。可选"
	echo  	 
	echo "示例："
	echo "FunctionName  8.0"  
		
	return 0 2>/dev/nul
	exit 0
}



# ================================================== 
# 函数名称：Action_Images		 					  	 
# 函数功能：动作:镜像
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#        prune : 清理镜像	 									 	  
#         load : 导入镜像 									 	  
#         save : 导出镜像 									 	  
#         pull : 拉取镜像	
#         list : 列表										 	  
# ================================================== 
function Action_Images(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Images()：参数<action_name>不能为空'  &&    return 1
		
	#------------- 功能主体 -------------#	
	# 清理镜像 	
	if [ "${action_name,,}" == 'prune' ]; then
		echo -e "\033[1;37m${LANG_Action_Images_01:-删除未使用的镜像}\033[0m" #白字
		echo  "${LANG_Optional:-可选选项}"
		echo  "    -a : ${LANG_Action_Images_02:-删除所有未使用的镜像，而不仅仅是悬挂的镜像}"
		echo  "    -f : ${LANG_ForceDelete:-强制删除}"			
		read -e -p "${LANG_SureDelete:-确定要删除吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}) [${LANG_Optional:-可选选项}]:" input  option	
		[ "${App_Debug}" == 1 ] && echo "input: ${input}  option: ${option}"
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker image prune  "${option}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "images" "prune" "" "" "${option}"
			if [ "$?" == "0" ];then
				# 清理残余环境变量和残余缓存文件
				PruneHandle "images"   #包含 刷新数据
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#prune#<All>#Success#docker image prune ${option}">>"${TmpDir_Log}Images/Images.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字 
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#prune#<All>#Fail#docker image prune ${option}">>"${TmpDir_Log}Images/Images.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字 
			fi
		fi
	fi	
	# 导入镜像 
	if [ "${action_name,,}" == 'load' ]; then		
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Images_03:-请输入待导入的镜像文件路径}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then
					# ImportImage  "/tmp/aa/php_5.6-fpm.tar" 
					echo -e "\033[1;${SYS_CmdFontColor}m"docker image load -i "${input}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "images" "load" "" "${input}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "images" "" 0 true
						# 刷新子数据
						for ActionImagesLoad_ID in ${INFO_Images_ID[@]}
						do
							# 不存在文件时，表示没有缓存数据
							[ ! -e "${TmpDir_Images_Sub}DATA_Images_${ActionImagesLoad_ID}.sh" ] && CacheHandle "image" "${ActionImagesLoad_ID}" "" true
						done
						unset ActionImagesLoad_ID
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#load#<ImportImage>#Success#docker image load -i ${input}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字 
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#load#<ImportImage>#Fail#docker image load -i ${input}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字 
					fi
					f=false
				else 
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 导出镜像 
	if [ "${action_name,,}" == 'save' ]; then
		echo "${LANG_Action_Images_04:-请分别输入保存路径和镜像名称[:标签]}"
		echo "${LANG_Action_Images_05:-空格分隔，如}"
		echo "'/tmp/aa/'   'php:5.6-fpm'"
		f=true
		while $f
		do		
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input  input2
			[ "${App_Debug}" == 1 ] && echo "input: ${input}  input2: ${input2}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ] && [ "${input2}" != "" ];then
					# ExportImage  "/tmp/aa/"   "php:5.6-fpm"	
					input=`echo ${input} | sed s/\'//g`
					input2=`echo ${input2} | sed s/\'//g`
					# : => @
					i_input2=${input2//:/@}
					# / => #
					i_input2=${i_input2//\//#}
					i_input2=${input}${i_input2}.tar
					echo -e "\033[1;${SYS_CmdFontColor}m"docker image save -o "${i_input2}"  "${input2}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "images" "save" "${input2}" "${input}"
					f=false
				else 
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done	
	fi		
	# 拉取镜像 
	if [ "${action_name,,}" == 'pull' ]; then
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Images_06:-请输入需要拉取的 镜像名称[:标签]}(e:${LANG_Exit:-退出}):"  input  
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then
					echo -e "\033[1;${SYS_CmdFontColor}m"docker  pull "${input}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "images" "pull" "" "${input}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "images" "" 0 true
						# 刷新子数据
						for ActionImagesPull_ID in ${INFO_Images_ID[@]}
						do
							# 不存在文件时，表示没有缓存数据
							[ ! -e "${TmpDir_Images_Sub}DATA_Images_${ActionImagesPull_ID}.sh" ] && CacheHandle "image" "${ActionImagesPull_ID}" "" true
						done
						unset ActionImagesPull_ID
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#pull#<PullImage>#Success#docker image pull ${input}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Images#pull#<PullImage>#Fail#docker image pull ${input}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else 
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo	
				fi
			else
				f=false
			fi			
		done
	fi
	# 列表
	if [ "${action_name,,}" == 'list' ]; then
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "images" "list" 
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset option
	unset f
}
##### 函数测试 #####
#Action_Images prune
#Action_Images load
#Action_Images save
#Action_Images pull
#Action_Images list


# ================================================== 
# 函数名称：Action_Image		 					  	 
# 函数功能：动作:镜像
# 函数参数：			 		 	  				 
#     		 $1:   镜像ID      	 
#     		 $2:   动作名称      	 
#     	   [$3]:   列表索引  	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#     details : 镜像详情	 									 	  
#         del : 镜像删除									 	  
#      modify : 镜像修改(设置镜像标签)	 									 	  
#        save : 镜像导出(当前)	 									 	  
# ================================================== 
function Action_Image(){
	# ID
	action_id="$1"
	# 动作
	action_name="$2"
	# 索引
	action_index="$3"	
	[ "${action_name}" == "" ] &&  echo 'Action_Image()：参数<action_name>不能为空'  &&    return 1
	[ "${action_id}" == "" ] &&  echo 'Action_Image()：参数<action_id>不能为空'  &&    return 1
	#------------- 信息头 -------------#
	echo -e "\033[1;37m${LANG_CurrentSelected:-当前选择的} ${LANG_Image:-镜像}:\033[0m"  #白字
	if [ "${SYS_Lang}" == "cn" ];then
		printf "\033[1;37m%-15s %37s %-22s %-22s\033[0m\n"  "ID"   "${LANG_Top_Repository:-仓库}"   "${LANG_Top_Tag:-标签}"  "${LANG_Top_Action:-动作}"   #白字
	else
		printf "\033[1;37m%-15s %35s %-20s %-20s\033[0m\n"  "ID"   "${LANG_Top_Repository:-Repository}"   "${LANG_Top_Tag:-Tag}"  "${LANG_Top_Action:-Action}"   #白字
	fi
	printf "%-15s %35s %-20s %-20s\n"  "${action_id}"  "${INFO_Images_Repository[${action_index}]}"  "${INFO_Images_Tag[${action_index}]}" "${action_name}" #灰字
	echo
	#------------- 信息头 -------------#
	#------------- 功能主体 -------------#
	# ${var,,} : 将字符串转换为小写
	# 镜像详情 
	if [ "${action_name,,}" == 'details' ]; then
		# CacheHandle "Image"  "${action_id}"
		# Show_Image "${action_id}"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "image" "details" "${action_id}" 
	fi	
	# 镜像删除 
	if [ "${action_name,,}" == 'del' ]; then
		read -e -p "${LANG_SureDelete:-确定要删除吗}(f:${LANG_Force:-强制} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"
		[ "${input,,}" == "f" ] && option="-f"
		if [ "${input,,}" == "f" ] || [ "${input,,}" == "y" ];then				
			# 使用 名称:标签 删除镜像						
			echo -e "\033[1;${SYS_CmdFontColor}m"docker rmi  "${option}" "${INFO_Images_Repository[${action_index}]}:${INFO_Images_Tag[${action_index}]}" "\033[0m"			
			ActionImageDel_rtStr="${INFO_Images_Repository[${action_index}]}:${INFO_Images_Tag[${action_index}]}"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "image" "del" "${ActionImageDel_rtStr}" "" "${option}"  "${action_id}"
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "images" "" 0 true                          #使列表中不再显示当前记录
				CacheHandle "image" "${action_id}" "" true 2>/dev/null  #更新当前ID的信息，当引用未全部删除时必需
				# 环境中残余变量处理
				## 删除整个数组 
				# unset INFO_Images_${action_id}_RepoTags  #此变量只影响(同ID)镜像详情，镜像详情会更新子数据，所有整个数组删除也可以
				## 删除单个元素
				ActionImageDel_i=0
				for ActionImageDel_rt in  `eval echo \\${INFO_Images_${action_id}_RepoTags[@]}`
				do	
					[ "${ActionImageDel_rt}" == "${ActionImageDel_rtStr}" ] && unset INFO_Images_${action_id}_RepoTags[${ActionImageDel_i}]					
					let ActionImageDel_i++
				done
				# 残余缓存文件处理
				ActionImageDel_Exist=0
				for ActionImageDel_ID in ${INFO_Images_ID[@]}
				do
					# 列表中有残留ID，表示还存在镜像的其它引用，没有全部删除
					[ "${action_id}" == "${ActionImageDel_ID}" ] && ActionImageDel_Exist=1
				done
				if [ "${ActionImageDel_Exist}" == "0" ];then
					# 镜像所有引用都删除时,删除相应的缓存文件
					if [ -e "${TmpDir_Images_Sub}DATA_Images_${action_id}.sh" ];then
						(
							rm -f "${TmpDir_Images_Sub}DATA_Images_${action_id}.sh"
						) && (
							[ "${App_Debug}" == 1 ] && echo "[Del:Success]: ${TmpDir_Images_Sub}DATA_Images_${action_id}.sh"
						) || (
							[ "${App_Debug}" == 1 ] && echo "[Del:Failure]: ${TmpDir_Images_Sub}DATA_Images_${action_id}.sh"
						)
					fi
				fi
				unset ActionImageDel_i
				unset ActionImageDel_rt
				unset ActionImageDel_Exist
				unset ActionImageDel_ID
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Image#del#${action_id}#Success#docker rmi ${option} ${action_id}">>"${TmpDir_Log}Images/Images.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Image#del#${action_id}#Fail#docker rmi ${option} ${action_id}">>"${TmpDir_Log}Images/Images.log"			
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 镜像修改
	if [ "${action_name,,}" == 'modify' ]; then
		# 设置镜像标签	
		echo -e "\033[1;37m${LANG_Action_Image_01:-为本地镜像添加新的名称和标签}\033[0m" #白字
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Image_02:-请输入新的 镜像名[:标签]}(e:${LANG_Exit:-退出}):"  input 
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"
			if [ "${input,,}" != "e" ] && [ "${input,,}" != "" ];then
				Target_Image_Tag="${input}"
				echo "${LANG_CurrentInput:-当前输入}: ${Target_Image_Tag}"
				read -e -p "${LANG_Action_Image_05:-确定要添加吗}(<AnyKey>:${LANG_ReInput:-重新输入} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input2
				[ "${App_Debug}" == 1 ] && echo "input2: ${input2}  Target_Image_Tag: ${Target_Image_Tag}"			
				if [ "${input2,,}" == "y" ];then
					echo -e "\033[1;${SYS_CmdFontColor}m"docker image tag  "${action_id}"  "${Target_Image_Tag}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "image" "modify" "${action_id}" "${Target_Image_Tag}"  
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "images" "" 0 true             #更改后的数据将显示在列表中
						CacheHandle "image" "${action_id}" "" true #同ID，所以要更新其标签信息
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Image#modify#${action_id}#Success#docker image tag ${action_id} ${Target_Image_Tag}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Image#modify#${action_id}#Fail#docker image tag ${action_id} ${Target_Image_Tag}">>"${TmpDir_Log}Images/Images.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				elif [ "${input2,,}" == "n" ];then
					f=false
				fi	
			else
				f=false
			fi	
		done
		
	fi
	# 镜像导出 
	if [ "${action_name,,}" == 'save' ]; then
		echo "${LANG_Action_Image_03:-镜像保存路径}"
		echo "${LANG_Action_Image_04:-斜杠结尾，如}"' /tmp/aa/'
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_SavePath:-请输入保存路径}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then
					# ExportImage  "/tmp/aa/"   "php:5.6-fpm"	
					input=`echo ${input} | sed s/\'//g`	
					input2="${INFO_Images_Repository[${action_index}]}:${INFO_Images_Tag[${action_index}]}"					
					# : => @
					i_input2=${input2//:/@}
					# / => #
					i_input2=${i_input2//\//#}
					i_input2=${input}${i_input2}.tar
					echo -e "\033[1;${SYS_CmdFontColor}m"docker image save -o "${i_input2}"  "${input2}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "image" "save" "${input2}" "${input}"  
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi		
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_id
	unset action_name
	unset action_index
	unset input
	unset input2
	unset option
	unset Target_Image_Tag
	unset f
	unset i_input2
	unset ActionDel_rtStr
}
##### 函数测试 #####
##Infos_Images 1
##Infos_Images
#Action_Image "90102e6d83ad" "details" 1
#Action_Image "90102e6d83ad" "del" 1
#Action_Image "fce289e99eb9" "modify" 30
# Action_Image "56e680f0448d" "save"  11


# ================================================== 
# 函数名称：Action_Containers		 					  	 
# 函数功能：动作:容器
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#        export : 导出容器		
#          list : 列表	
# ================================================== 
function Action_Containers(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Containers()：参数<action_name>不能为空'  &&    return 1
	#------------- 功能主体 -------------#
	
	## (TODO List)独立制作一套容器管理的工具，基本配置，资源配置，配置管理等
	# 运行容器(配置模版=>配置文件=>命令源文|运行容器)
	## 配置模版生成配置文件，按需修改此配置文件
	## 另，根据此配置文件输出并保存命令源文(run docker-compose)
	### 生成配置文件
	### 运行容器(配置文件)
		# 刷新数据
		#CacheHandle "containers" "" 0 true
		# 日志记录
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Containers#run#''#Success#docker run ">>"${TmpDir_Log}Containers/Containers.log"
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Containers#run#''#Fail#docker run ">>"${TmpDir_Log}Containers/Containers.log"
				
	# 导入容器(TODO List:独立函数)。其工作原理(导入为镜像)并不理想，待考虑。
		# 刷新数据(导入为镜像)
		#CacheHandle "images" "" 0 true
		# 日志记录
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Containers#import#''#Success#docker import ">>"${TmpDir_Log}Containers/Containers.log"
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Containers#import#''#Fail#docker import ">>"${TmpDir_Log}Containers/Containers.log"
	
	# 导出容器(TODO List:独立函数)
	if [ "${action_name,,}" == 'export' ]; then
		echo "${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}""，${LANG_Action_Containers_01:-斜杠结尾}"
		echo "'${LANG_Action_Containers_02:-保存路径}'  '${LANG_Action_Containers_03:-容器ID(名称)}'  '[${LANG_Action_Containers_04:-自定义文件名}]'"
		echo "'/tmp/aa/'  'myContainer'"
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input  input2  input3
			[ "${App_Debug}" == 1 ] && echo "input: ${input}  input2: ${input2}  input3: ${input3}  "	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ] && [ "${input2}" != "" ];then					
					# 去除单引号
					input=`echo ${input} | sed s/\'//g`
					input2=`echo ${input2} | sed s/\'//g`
					[ "${input3}" != "" ] && input3=`echo ${input3} | sed s/\'//g`
					[ "${input3}" != "" ] && ContainerName="${input3}" || ContainerName="${input2}"
					# 目录不存在则创建
					[ ! -d "${input}" ] &&  mkdir -p "${input}"
					echo -e "\033[1;${SYS_CmdFontColor}m"docker container export -o "${input}${ContainerName}.tar"  "${input2}"	 "\033[0m"					
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值	
					ActionHandle "containers" "export" "${input2}" "${input}${ContainerName}.tar" 
					if [ "$?" == "0" ];then
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 列表
	if [ "${action_name,,}" == 'list' ]; then		
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "containers" "list" 
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset input2
	unset input3	
	unset f	
}
##### 函数测试 #####
#Action_Containers  "export"
#Action_Containers  "list"


# ================================================== 
# 函数名称：Action_Container		 					  	 
# 函数功能：动作:容器
# 函数参数：			 		 	  				 
#     		 $1:   容器ID      	 
#     		 $2:   动作名称      	 
#     	     $3:   列表索引  	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#     details : 容器详情	 									 	  
#        stop : 停止容器 									 	  
#       start : 启动容器								 	  
#       pause : 暂停容器								 	  
#     unpause : 恢复容器								 	  
#     restart : 重启容器								 	  
#         del : 容器删除								 	  
#      export : 容器导出(当前)									 	  
#      commit : 容器提交(创建镜像)								 	  
#        exec : 进入容器								 	  
#        diff : 容器差异						 	  
# ================================================== 
function Action_Container(){
	# ID
	action_id="$1"
	# 动作
	action_name="$2"
	# 索引
	action_index="$3"
	[ "${action_name}" == "" ] &&  echo 'Action_Container()：参数<action_name>不能为空'  &&    return 1
	[ "${action_id}" == "" ] &&  echo 'Action_Container()：参数<action_id>不能为空'  &&    return 1
	[ "${action_index}" == "" ] &&  echo 'Action_Container()：参数<action_index>不能为空'  &&    return 1
	#------------- 信息头 -------------#
	echo -e "\033[1;37m${LANG_CurrentSelected:-当前选择的} ${LANG_Container:-容器}:\033[0m"  #白字
	if [ "${SYS_Lang}" == "cn" ];then
		printf "\033[1;37m%-15s %-37s %-22s\033[0m\n"  "ID"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	else
		printf "\033[1;37m%-15s %-35s %-20s\033[0m\n"  "ID"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	fi
	printf "%-15s %-35s %-20s\n"  "${action_id}"  "${INFO_Containers_Names[${action_index}]}"  "${action_name}" #灰字
	echo
	#------------- 信息头 -------------#
	#------------- 功能主体 -------------#
	# ${var,,} : 将字符串转换为小写
	# 容器详情
	if [ "${action_name,,}" == 'details' ]; then
		# CacheHandle "container"  "${action_id}"
		# Show_Container  "${action_id}"  "${action_index}"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "container" "details" "${action_id}" "${action_index}" 
	fi	
	# 停止
	if [ "${action_name,,}" == 'stop' ]; then		
		read -e -p "${LANG_Action_Container_01:-确定要停止容器吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"		
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker container stop   "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "container" "stop" "${action_id}" 
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "containers" "" 0 true
				CacheHandle "container" "${action_id}" "" true
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#stop#${action_id}#Success#docker container stop ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#stop#${action_id}#Fail#docker container stop ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 启动
	if [ "${action_name,,}" == 'start' ]; then
		echo -e "\033[1;${SYS_CmdFontColor}m"docker container start   "${action_id}" "\033[0m"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "container" "start" "${action_id}" 
		if [ "$?" == "0" ];then
			# 刷新数据
			CacheHandle "containers" "" 0 true
			CacheHandle "container" "${action_id}" "" true
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#start#${action_id}#Success#docker container start ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
			echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
		else
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#start#${action_id}#Fail#docker container start ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
			echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
		fi		
	fi
	# 暂停
	if [ "${action_name,,}" == 'pause' ]; then		
		read -e -p "${LANG_Action_Container_02:-确定要暂停容器吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"		
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker container pause   "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "container" "pause" "${action_id}"
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "containers" "" 0 true
				CacheHandle "container" "${action_id}" "" true
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#pause#${action_id}#Success#docker container pause ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#pause#${action_id}#Fail#docker container pause ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 恢复
	if [ "${action_name,,}" == 'unpause' ]; then
		echo -e "\033[1;${SYS_CmdFontColor}m"docker container unpause   "${action_id}" "\033[0m"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "container" "unpause" "${action_id}"
		if [ "$?" == "0" ];then
			# 刷新数据
			CacheHandle "containers" "" 0 true
			CacheHandle "container" "${action_id}" "" true
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#unpause#${action_id}#Success#docker container unpause ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
			echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
		else
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#unpause#${action_id}#Fail#docker container unpause ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
			echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
		fi		
	fi
	# 重启
	if [ "${action_name,,}" == 'restart' ]; then		
		read -e -p "${LANG_Action_Container_03:-确定要重启容器吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"		
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker container restart   "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "container" "restart" "${action_id}" 
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "containers" "" 0 true
				CacheHandle "container" "${action_id}" "" true
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#restart#${action_id}#Success#docker container restart ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#restart#${action_id}#Fail#docker container restart ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 容器删除
	if [ "${action_name,,}" == 'del' ]; then				
		read -e -p "${LANG_Action_Container_04:-确定要删除容器吗}(f:${LANG_Force:-强制} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"
		[ "${input,,}" == "f" ] && option="-f"
		if [ "${input,,}" == "f" ] || [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker container rm  "${option}"  "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "container" "del" "${action_id}" ""  "${option}"
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "containers" "" 0 true   #使列表中不再显示当前记录
				# 清理相关的缓存文件 
				if [ -e "${TmpDir_Containers_Sub}DATA_Containers_${action_id}.sh" ];then
					(
						rm -f "${TmpDir_Containers_Sub}DATA_Containers_${action_id}.sh"
					) && (
						[ "${App_Debug}" == 1 ] && echo "[Del:Success]: ${TmpDir_Containers_Sub}DATA_Containers_${action_id}.sh"
					) || (
						[ "${App_Debug}" == 1 ] && echo "[Del:Failure]: ${TmpDir_Containers_Sub}DATA_Containers_${action_id}.sh"
					)
				fi
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#del#${action_id}#Success#docker container rm ${option} ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#del#${action_id}#Fail#docker container rm ${option} ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 容器导出
	if [ "${action_name,,}" == 'export' ]; then
		echo "${LANG_Action_Container_05:-容器保存路径}"
		echo "${LANG_Action_Container_06:-斜杠结尾，如}"'  /tmp/aa/'
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_SavePath:-请输入保存路径}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					# 去除单引号
					input=`echo ${input} | sed s/\'//g`
					ContainerName="${INFO_Containers_Names[${action_index}]}"
					# 目录不存在则创建
					[ ! -d "${input}" ] &&  mkdir -p "${input}"
					echo -e "\033[1;${SYS_CmdFontColor}m"docker container export -o "${input}${ContainerName}.tar"  "${action_id}" "\033[0m"						
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值	
					ActionHandle "container" "export" "${action_id}" "${input}${ContainerName}.tar" 
					if [ "$?" == "0" ];then
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 容器提交(提交为镜像)
	if [ "${action_name,,}" == 'commit' ]; then
		echo "${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}"
		echo "'${LANG_Action_Container_07:-镜像仓库[:标签]}' '[${LANG_Action_Container_08:-作者}]'  '[${LANG_Action_Container_09:-提交消息}]'"  
		echo "${LANG_Example:-示例}"
		echo "'svendowideit/testimage:v3'  'hentai@a-team.com'  'Added a new file'"
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input   Author  Message 
			[ "${App_Debug}" == 1 ] && echo "input(Repository_Tag): ${input}   Author: ${Author}   Message: ${Message}"	
			Repository_Tag="${input}"
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					# 去除单引号
					Repository_Tag=`echo ${Repository_Tag} | sed s/\'//g`
					Author=`echo ${Author} | sed s/\'//g`
					[ "${Author}" != "" ] && Options="${Options} -a ${Author}"
					[ "${Message}" != "" ] && Options="${Options} -m ${Message}"
					echo -e "\033[1;${SYS_CmdFontColor}m"docker container commit "${Options}"  "${action_id}"  "${Repository_Tag}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "container" "commit" "${action_id}" "${Repository_Tag}"  "${Options}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "images" "" 0 true    #使列表中显示数据
						# 刷新子数据
						for ActionContainerCommit_ID in ${INFO_Images_ID[@]}
						do
							if [ ! -e "${TmpDir_Images_Sub}DATA_Images_${ActionContainerCommit_ID}.sh" ];then
								#不存在ID相关的缓存文件时，构建缓存
								CacheHandle "image" "${ActionContainerCommit_ID}" "" true
							fi
						done
						unset ActionContainerCommit_ID
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#commit#${action_id}#Success#docker container commit ${Options} ${action_id} ${Repository_Tag}">>"${TmpDir_Log}Containers/Containers.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#commit#${action_id}#Fail#docker container commit ${Options} ${action_id} ${Repository_Tag}">>"${TmpDir_Log}Containers/Containers.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 进入容器
	if [ "${action_name,,}" == 'exec' ]; then		
		echo -e "\033[1;${SYS_CmdFontColor}m"docker exec -it "${action_id}"  bash "\033[0m"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值	
		ActionHandle "container" "exec" "${action_id}" 
	fi
	# 容器差异
	if [ "${action_name,,}" == 'diff' ]; then		
		echo -e "\033[1;${SYS_CmdFontColor}m"docker container diff "${action_id}" "\033[0m"
		echo
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值	
		ActionHandle "container" "diff" "${action_id}" 
	fi	
	# (TODO List)容器更新
		# 刷新数据
		#CacheHandle "container" "${action_id}" "" true
		# 日志记录
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#update#${action_id}#Success#docker container update ${Options} ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
		#echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Container#update#${action_id}#Fail#docker container update ${Options} ${action_id}">>"${TmpDir_Log}Containers/Containers.log"
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_id
	unset action_name
	unset action_index
	unset input
	unset input2 
	unset ContainerName 
	unset Author 
	unset Message 
	unset Repository_Tag 
	unset Options 
}
##### 函数测试 #####
# Infos_Containers 1
# Infos_Containers
# Action_Container  "72f91ea5b39d"  "details" 1
#Action_Container  "72f91ea5b39d"  "stop" 1
#Action_Container  "72f91ea5b39d"  "start" 1
#Action_Container  "72f91ea5b39d"  "pause" 1
#Action_Container  "72f91ea5b39d"  "unpause" 1
#Action_Container  "72f91ea5b39d"  "restart" 1
#Action_Container  "72f91ea5b39d"  "del" 1
#Action_Container  "72f91ea5b39d"  "export" 1
# Action_Container  "72f91ea5b39d"  "commit" 1
#Action_Container  "72f91ea5b39d"  "exec" 1
#Action_Container  "72f91ea5b39d"  "diff" 1


# ================================================== 
# 函数名称：Action_Networks		 					  	 
# 函数功能：动作:网络
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#          del : 删除网络	
#        prune : 清理网络	
#       create : 创建网络	
#         list : 列表		
# ================================================== 
function Action_Networks(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Networks()：参数<action_name>不能为空'  &&    return 1
	#------------- 功能主体 -------------#
	# 删除网络
	if [ "${action_name,,}" == 'del' ]; then		
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Networks_01:-请输入待删除的网络名称或ID}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"
			if [ "${input,,}" != "e" ] && [ "${input,,}" != "" ];then
				NetworkNameID="${input}"
				echo "${LANG_CurrentInput:-当前输入}: ${NetworkNameID}"
				read -e -p "${LANG_SureDelete:-确定要删除吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input2
				[ "${App_Debug}" == 1 ] && echo "input2: ${input2}  NetworkNameID: ${NetworkNameID}"			
				if [ "${input2,,}" == "y" ];then
					echo -e "\033[1;${SYS_CmdFontColor}m"docker network rm  "${NetworkNameID}" "\033[0m"						
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "networks" "del" "${NetworkNameID}" 
					if [ "$?" == "0" ];then
						# 刷新数据(使列表中不再显示当前记录)
						CacheHandle "networks" "" 0 true
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#del#${NetworkNameID}#Success#docker network rm ${NetworkNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#del#${NetworkNameID}#Fail#docker network rm ${NetworkNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false					
				elif [ "${input2,,}" == "n" ];then
					f=false			
				elif [ "${input2,,}" == "" ];then
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				else 
					echo "${LANG_Warning_InputIllegal:-警告: 输入非法...}"
					echo
				fi
			else
				f=false
			fi			
		done		
	fi
	# 清理网络
	if [ "${action_name,,}" == 'prune' ]; then
		echo -e "\033[1;37m${LANG_Action_Networks_02:-删除所有未使用的网络(未被任何容器引用的网络)}\033[0m" #白字
		echo  "${LANG_Optional:-可选选项}"
		echo  "    -f : ${LANG_ForceDelete:-强制删除}" 
		echo
		read -e -p "${LANG_SureDelete:-确定要删除吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}) [${LANG_Optional:-可选选项}]:" input  option
		[ "${App_Debug}" == 1 ] && echo "input: ${input}  option: ${option}"
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker network prune   "${option}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "networks" "prune" "" ""  "${option}"
			if [ "$?" == "0" ];then
				# 清理残余环境变量和残余缓存文件
				PruneHandle "networks"   #包含 刷新数据
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#prune#<All>#Success#docker network prune ${option}">>"${TmpDir_Log}Networks/Networks.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#prune#<All>#Fail#docker network prune ${option}">>"${TmpDir_Log}Networks/Networks.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi	
	# 创建网络
	if [ "${action_name,,}" == 'create' ]; then
		echo -e "\033[1;37m${LANG_Action_Networks_08:-每个ip范围(地址池)或网关都必须有相应的子网}\033[0m"
		echo 
		echo -e "\033[1;37m${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}\033[0m"
		echo "'${LANG_Action_Networks_03:-网络名称}'  '[${LANG_Action_Networks_04:-网络驱动}]'"
		echo "'${LANG_Action_Networks_03:-网络名称}'  '[${LANG_Action_Networks_04:-网络驱动}]'  '${LANG_Action_Networks_05:-网关}'  '${LANG_Action_Networks_06:-子网}'"
		echo "'${LANG_Action_Networks_03:-网络名称}'  '[${LANG_Action_Networks_04:-网络驱动}]'  '${LANG_Action_Networks_05:-网关}'  '${LANG_Action_Networks_06:-子网}'  '${LANG_Action_Networks_07:-地址池}'"
		echo -e "\033[1;37m${LANG_Example:-示例}\033[0m"
		echo "'mynet'  'bridge'  '172.28.5.254'  '172.28.0.0/16'  '172.28.5.0/24'" 
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input  NetworkDriver  Gateway  Subnet  IpRange
			[ "${App_Debug}" == 1 ] && echo "input(NetworkName): ${input}   NetworkDriver: ${NetworkDriver}   Gateway: ${Gateway}  Subnet: ${Subnet}  IpRange: ${IpRange}"	
			NetworkName="${input}"
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					# 去除单引号
					NetworkName=`echo ${NetworkName} | sed s/\'//g`
					[ "${NetworkDriver}" != "" ] && NetworkDriver=`echo ${NetworkDriver} | sed s/\'//g`
					[ "${Gateway}" != "" ] && Gateway=`echo ${Gateway} | sed s/\'//g`
					[ "${Subnet}" != "" ] && Subnet=`echo ${Subnet} | sed s/\'//g`
					[ "${IpRange}" != "" ] && IpRange=`echo ${IpRange} | sed s/\'//g`
					# 可选选项
					[ "${NetworkDriver}" != "" ] && Options="${Options} --driver ${NetworkDriver}"
					[ "${Gateway}" != "" ] && Options="${Options} --gateway ${Gateway}"
					[ "${Subnet}" != "" ] && Options="${Options} --subnet ${Subnet}"					
					[ "${IpRange}" != "" ] && Options="${Options} --ip-range ${IpRange}"					
												
					echo -e "\033[1;${SYS_CmdFontColor}m"docker network create "${Options}"  "${NetworkName}" "\033[0m" 
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "networks" "create" "" "${NetworkName}"  "${Options}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "networks" "" 0 true  #使列表中显示数据
						# 刷新子数据
						for ActionNetworksCreate_ID in ${INFO_Networks_ID[@]}
						do
							if [ ! -e "${TmpDir_Networks_Sub}DATA_Networks_${ActionNetworksCreate_ID}.sh" ];then
								#不存在ID相关的缓存文件时，构建缓存
								CacheHandle "network" "${ActionNetworksCreate_ID}" "" true
							fi
						done
						unset ActionNetworksCreate_ID
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#create#${NetworkName}#Success#docker network create ${Options} ${NetworkName}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Networks#create#${NetworkName}#Fail#docker network create ${Options} ${NetworkName}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 列表
	if [ "${action_name,,}" == 'list' ]; then		
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "networks" "list" 
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset input2
	unset option
	unset Options
	unset NetworkNameID
	unset NetworkName
	unset NetworkDriver
	unset Gateway
	unset Subnet
	unset IpRange
	unset f	
}
##### 函数测试 #####
# Action_Networks  "del"
#Action_Networks  "prune"
#Action_Networks  "create"
#Action_Networks  "list"


# ================================================== 
# 函数名称：Action_Network		 					  	 
# 函数功能：动作:网络
# 函数参数：			 		 	  				 
#     		 $1:   网络ID      	 
#     		 $2:   动作名称      	 
#     	     $3:   列表索引  	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#     details : 网络详情	 									 	  
#         del : 网络删除								 	  
#     connect : 网络连接(容器接入到当前网络)								 	  
#  disconnect : 网络断开(断开容器的当前网络)
# ================================================== 
function Action_Network(){
	# ID
	action_id="$1"
	# 动作
	action_name="$2"
	# 索引
	action_index="$3"
	[ "${action_name}" == "" ] &&  echo 'Action_Network()：参数<action_name>不能为空'  &&    return 1
	[ "${action_id}" == "" ] &&  echo 'Action_Network()：参数<action_id>不能为空'  &&    return 1
	[ "${action_index}" == "" ] &&  echo 'Action_Network()：参数<action_index>不能为空'  &&    return 1
	#------------- 信息头 -------------#
	echo -e "\033[1;37m${LANG_CurrentSelected:-当前选择的} ${LANG_Network:-网络}:\033[0m"  #白字 
	if [ "${SYS_Lang}" == "cn" ];then
		printf "\033[1;37m%-15s %-37s %-22s\033[0m\n"  "ID"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	else
		printf "\033[1;37m%-15s %-35s %-20s\033[0m\n"  "ID"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	fi
	printf "%-15s %-35s %-20s\n"  "${action_id}"  "${INFO_Networks_Name[${action_index}]}"  "${action_name}" #灰字
	echo
	#------------- 信息头 -------------#
	#------------- 功能主体 -------------#
	# ${var,,} : 将字符串转换为小写
	# 网络详情
	if [ "${action_name,,}" == 'details' ]; then
		# CacheHandle "network"  "${action_id}" 
		# Show_Network  "${action_id}"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "network" "details" "${action_id}" 
	fi	
	# 网络删除
	if [ "${action_name,,}" == 'del' ]; then		
		read -e -p "${LANG_Action_Network_01:-确定要删除网络吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"		
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker network rm   "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "network" "del" "${action_id}" 
			if [ "$?" == "0" ];then
				# 刷新数据
				CacheHandle "networks" "" 0 true  #使列表中不再显示当前记录
				# 清除残余的缓存文件
				if [ -e "${TmpDir_Networks_Sub}DATA_Networks_${action_id}.sh" ];then
					(
						rm -f "${TmpDir_Networks_Sub}DATA_Networks_${action_id}.sh"
					) && (
						[ "${App_Debug}" == 1 ] && echo "[Del:Success]: ${TmpDir_Networks_Sub}DATA_Networks_${action_id}.sh"
					) || (
						[ "${App_Debug}" == 1 ] && echo "[Del:Failure]: ${TmpDir_Networks_Sub}DATA_Networks_${action_id}.sh"
					)
				fi
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#del#${action_id}#Success#docker network rm ${action_id}">>"${TmpDir_Log}Networks/Networks.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#del#${action_id}#Fail#docker network rm ${action_id}">>"${TmpDir_Log}Networks/Networks.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 网络连接
	if [ "${action_name,,}" == 'connect' ]; then
		echo "${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}"
		echo "'${LANG_Action_Network_02:-容器名称(或ID)}' '[IPv4]'  '[IPv6]'  '[${LANG_Action_Network_03:-网络别名}]'" 
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input   IP4  IP6  NetworkAlias
			[ "${App_Debug}" == 1 ] && echo "input(ContainerNameID): ${input}   IP4: ${IP4}   IP6: ${IP6}  NetworkAlias: ${NetworkAlias}"	
			ContainerNameID="${input}"
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					# 去除单引号
					ContainerNameID=`echo ${ContainerNameID} | sed s/\'//g`
					[ "${IP4}" != "" ] && IP4=`echo ${IP4} | sed s/\'//g`
					[ "${IP6}" != "" ] && IP6=`echo ${IP6} | sed s/\'//g`
					[ "${NetworkAlias}" != "" ] && NetworkAlias=`echo ${NetworkAlias} | sed s/\'//g`
					# 可选选项
					[ "${IP4}" != "" ] && Options="${Options} --ip ${IP4}"
					[ "${IP6}" != "" ] && Options="${Options} --ip6 ${IP6}"
					[ "${NetworkAlias}" != "" ] && Options="${Options} --alias ${NetworkAlias}"					
					
					echo -e "\033[1;${SYS_CmdFontColor}m"docker network connect "${Options}"  "${INFO_Networks_Name[${action_index}]}"  "${ContainerNameID}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "network" "connect" "${action_id}" "${ContainerNameID}"  "${Options}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "network" "${action_id}"  "" true
						# 刷新容器数据(网络列表)
						CacheHandle "containers" "" 0 true    #容器中的网络列表，位于主数据中
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#connect#${action_id}#Success#docker network connect ${Options} ${action_id} ${ContainerNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#connect#${action_id}#Fail#docker network connect ${Options} ${action_id} ${ContainerNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 网络断开
	if [ "${action_name,,}" == 'disconnect' ]; then		
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Network_04:-请输入容器名称或ID}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"
			if [ "${input,,}" != "e" ] && [ "${input,,}" != "" ];then
				ContainerNameID="${input}"
				echo "${LANG_CurrentInput:-当前输入}: ${ContainerNameID}"
				read -e -p "${LANG_Action_Network_05:-确定要断开容器的当前网络吗}(f:${LANG_Force:-强制} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input2
				[ "${App_Debug}" == 1 ] && echo "input2: ${input2}  ContainerNameID: ${ContainerNameID}"			
				if [ "${input2,,}" == "y" ] || [ "${input2,,}" == "f" ];then
					[ "${input2,,}" == "f" ] && Options="-f"									
										
					echo -e "\033[1;${SYS_CmdFontColor}m"docker network disconnect "${Options}"  "${INFO_Networks_Name[${action_index}]}"   "${ContainerNameID}" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "network" "disconnect" "${action_id}" "${ContainerNameID}"  "${Options}"
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "network" "${action_id}"  "" true
						# 刷新容器数据(网络列表)
						CacheHandle "containers" "" 0 true    #容器中的网络列表，位于主数据中
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#disconnect#${action_id}#Success#docker network disconnect ${Options} ${action_id} ${ContainerNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Network#disconnect#${action_id}#Fail#docker network disconnect ${Options} ${action_id} ${ContainerNameID}">>"${TmpDir_Log}Networks/Networks.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false					
				elif [ "${input2,,}" == "n" ];then
					f=false			
				elif [ "${input2,,}" == "" ];then
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				else 
					echo "${LANG_Warning_InputIllegal:-警告: 输入非法...}"
					echo
				fi					
			else
				f=false
			fi	
		done
		
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_id
	unset action_name
	unset action_index
	unset input
	unset Options
	unset ContainerNameID
	unset IP4
	unset IP6
	unset NetworkAlias
}
##### 函数测试 #####
# Infos_Networks 1
#Action_Network  "79f6f0e6dc97"  "details"  1
#Action_Network  "79f6f0e6dc97"  "del"  1
#Action_Network  "79f6f0e6dc97"  "connect"  1
# Action_Network  "79f6f0e6dc97"  "disconnect"  1


# ================================================== 
# 函数名称：Action_Volumes	 					  	 
# 函数功能：动作:卷
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#          del : 删除卷	
#        prune : 清理卷	
#       create : 创建卷	
#         list : 列表	
# ================================================== 
function Action_Volumes(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Volumes()：参数<action_name>不能为空'  &&    return 1
	#------------- 功能主体 -------------#
	# 删除卷
	if [ "${action_name,,}" == 'del' ]; then		
		f=true
		while $f
		do
			read -e -p "${LANG_Action_Volumes_01:-请输入待删除的卷名称}(e:${LANG_Exit:-退出}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"
			if [ "${input,,}" != "e" ] && [ "${input,,}" != "" ];then
				VolumeNameID="${input}"
				echo "${LANG_CurrentInput:-当前输入}: ${VolumeNameID}"
				read -e -p "${LANG_SureDelete:-确定要删除吗}(f:${LANG_Force:-强制} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input2
				[ "${App_Debug}" == 1 ] && echo "input2: ${input2}  VolumeNameID: ${VolumeNameID}"			
				if [ "${input2,,}" == "y" ] || [ "${input2,,}" == "f" ];then					
					[ "${input2,,}" == "f" ] && option="-f"
									
					echo -e "\033[1;${SYS_CmdFontColor}m"docker volume rm  "${option}"  "${VolumeNameID}" "\033[0m"						
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "volumes" "del" "" "${VolumeNameID}"  "${option}"
					if [ "$?" == "0" ];then
						# 刷新数据 
						CacheHandle "volumes" ""  0 true  #使列表中不再显示当前记录
						# 清理相关的缓存文件 
						if [ -e "${TmpDir_Volumes_Sub}DATA_Volumes_${VolumeNameID}.sh" ];then
							(
								rm -f "${TmpDir_Volumes_Sub}DATA_Volumes_${VolumeNameID}.sh"
							) && (
								[ "${App_Debug}" == 1 ] && echo "[Del:Success]: ${TmpDir_Volumes_Sub}DATA_Volumes_${VolumeNameID}.sh"
							) || (
								[ "${App_Debug}" == 1 ] && echo "[Del:Failure]: ${TmpDir_Volumes_Sub}DATA_Volumes_${VolumeNameID}.sh"
							)
						fi
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#del#${VolumeNameID}#Success#docker volume rm ${option} ${VolumeNameID}">>"${TmpDir_Log}Volumes/Volumes.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#del#${VolumeNameID}#Fail#docker volume rm ${option} ${VolumeNameID}">>"${TmpDir_Log}Volumes/Volumes.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false					
				elif [ "${input2,,}" == "n" ];then
					f=false			
				elif [ "${input2,,}" == "" ];then
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				else 
					echo "${LANG_Warning_InputIllegal:-警告: 输入非法...}"
					echo
				fi
			else
				f=false
			fi			
		done		
	fi
	# 清理卷
	if [ "${action_name,,}" == 'prune' ]; then
		echo -e "\033[1;37m${LANG_Action_Volumes_02:-删除所有未使用的本地卷}\033[0m" #白字
		echo  "${LANG_Optional:-可选选项}"
		echo  "    -f : ${LANG_ForceDelete:-强制删除}" 
		echo
		read -e -p "${LANG_SureDelete:-确定要删除吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}) [${LANG_Optional:-可选选项}]:" input  option
		[ "${App_Debug}" == 1 ] && echo "input: ${input}  option: ${option}"
		if [ "${input,,}" == "y" ];then
			echo -e "\033[1;${SYS_CmdFontColor}m"docker volume prune  "${option}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "volumes" "prune" "" ""  "${option}"
			if [ "$?" == "0" ];then
				# 清理残余环境变量和残余缓存文件
				PruneHandle "volumes"  #包含 刷新数据
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#prune#<All>#Success#docker volume prune ${option}">>"${TmpDir_Log}Volumes/Volumes.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#prune#<All>#Fail#docker volume prune ${option}">>"${TmpDir_Log}Volumes/Volumes.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	# 创建卷
	if [ "${action_name,,}" == 'create' ]; then
		echo "${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}"
		echo "'${LANG_Action_Volumes_03:-卷名称}'  '[${LANG_Action_Volumes_04:-卷驱动}]'"
		echo "${LANG_Example:-示例}"
		echo "'myVolume'  'local'" 
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input  VolumeDriver
			[ "${App_Debug}" == 1 ] && echo "input(VolumeName): ${input}   VolumeDriver: ${VolumeDriver}"	
			VolumeName="${input}"
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					# 去除单引号
					VolumeName=`echo ${VolumeName} | sed s/\'//g`
					[ "${VolumeDriver}" != "" ] && VolumeDriver=`echo ${VolumeDriver} | sed s/\'//g`					
					# 可选选项
					[ "${VolumeDriver}" != "" ] && Options="${Options} --driver ${VolumeDriver}"									
						
					echo -e "\033[1;${SYS_CmdFontColor}m"docker volume create "${Options}"  "${VolumeName}" "\033[0m" 
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "volumes" "create" "" "${VolumeName}"  "${Options}" 
					if [ "$?" == "0" ];then
						# 刷新数据
						CacheHandle "volumes" ""  0 true
						# 刷新子数据
						for ActionVolumesCreate_ID in ${INFO_Volumes_Name[@]}
						do
							if [ ! -e "${TmpDir_Volumes_Sub}DATA_Volumes_${ActionVolumesCreate_ID}.sh" ];then
								#不存在ID相关的缓存文件时，构建缓存
								CacheHandle "volume" "${ActionVolumesCreate_ID}" "" true
							fi
						done
						unset ActionVolumesCreate_ID
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#create#${VolumeName}#Success#docker volume create ${Options} ${VolumeName}">>"${TmpDir_Log}Volumes/Volumes.log"
						echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
					else
						# 日志记录
						echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volumes#create#${VolumeName}#Fail#docker volume create ${Options} ${VolumeName}">>"${TmpDir_Log}Volumes/Volumes.log"
						echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
					fi
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 列表
	if [ "${action_name,,}" == 'list' ]; then		
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "volumes" "list"  
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset input2
	unset option
	unset Options
	unset VolumeNameID
	unset VolumeName
	unset VolumeDriver
}
##### 函数测试 #####
# Action_Volumes "del"
# Action_Volumes "prune"
#Action_Volumes "create"
#Action_Volumes "list"


# ================================================== 
# 函数名称：Action_Volume	 					  	 
# 函数功能：动作:卷
# 函数参数：			 		 	  				 
#     		 $1:   卷ID(名称)      	 
#     		 $2:   动作名称      	 
#     	     $3:   列表索引  	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#     details : 卷详情	 									 	  
#         del : 卷删除
# ================================================== 
function Action_Volume(){
	# ID
	action_id="$1"
	# 动作
	action_name="$2"
	# 索引
	action_index="$3"
	[ "${action_name}" == "" ] &&  echo 'Action_Volume()：参数<action_name>不能为空'  &&    return 1
	[ "${action_id}" == "" ] &&  echo 'Action_Volume()：参数<action_id>不能为空'  &&    return 1
	[ "${action_index}" == "" ] &&  echo 'Action_Volume()：参数<action_index>不能为空'  &&    return 1
	#------------- 信息头 -------------#
	echo -e "\033[1;37m${LANG_CurrentSelected:-当前选择的} ${LANG_Volume:-卷}:\033[0m"  #白字 
	if [ "${SYS_Lang}" == "cn" ];then
		printf "\033[1;37m%-67s %-22s\033[0m\n"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	else
		printf "\033[1;37m%-65s %-20s\033[0m\n"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	fi
	printf "%-65s %-20s\n"  "${action_id}"    "${action_name}" #灰字
	echo
	#------------- 信息头 -------------#
	#------------- 功能主体 -------------#
	# ${var,,} : 将字符串转换为小写
	# 卷详情
	if [ "${action_name,,}" == 'details' ]; then
		# CacheHandle "volume" "${action_id}"
		# Show_Volume  "${action_id}"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "volume" "details" "${action_id}"  
	fi
	# 卷删除
	if [ "${action_name,,}" == 'del' ]; then		
		read -e -p "${LANG_Action_Volume_01:-确定要删除卷吗}(f:${LANG_Force:-强制} | y:${LANG_Yes:-是} | n:${LANG_No:-否}):" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"		
		if [ "${input,,}" == "y" ] || [ "${input,,}" == "f" ];then			
			[ "${input,,}" == "f" ] && option="-f"
			
			echo -e "\033[1;${SYS_CmdFontColor}m"docker volume rm   "${option}"   "${action_id}" "\033[0m"
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "volume" "del" "${action_id}" ""  "${option}"
			if [ "$?" == "0" ];then
				# 刷新数据 
				CacheHandle "volumes" ""  0 true  #使列表中不再显示当前记录 
				# 清理相关的缓存文件 
				if [ -e "${TmpDir_Volumes_Sub}DATA_Volumes_${action_id}.sh" ];then
					(
						rm -f "${TmpDir_Volumes_Sub}DATA_Volumes_${action_id}.sh"
					) && (
						[ "${App_Debug}" == 1 ] && echo "[Del:Success]: ${TmpDir_Volumes_Sub}DATA_Volumes_${action_id}.sh"
					) || (
						[ "${App_Debug}" == 1 ] && echo "[Del:Failure]: ${TmpDir_Volumes_Sub}DATA_Volumes_${action_id}.sh"
					)
				fi
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volume#del#${action_id}#Success#docker volume rm ${option} ${action_id}">>"${TmpDir_Log}Volumes/Volumes.log"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
			else
				# 日志记录
				echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Volume#del#${action_id}#Fail#docker volume rm ${option} ${action_id}">>"${TmpDir_Log}Volumes/Volumes.log"
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_id
	unset action_name
	unset action_index
	unset input
	unset option
}
##### 函数测试 #####
# Infos_Volumes 1
# Action_Volume  "8c170a5fd6a993c65a87a0bf5446127bf95dc96852e1e74f3f6810fb1c2c34ae"  "details"  1
# Action_Volume  "8c170a5fd6a993c65a87a0bf5446127bf95dc96852e1e74f3f6810fb1c2c34ae"  "del"  1


# ================================================== 
# 函数名称：Action_Searchs 					  	 
# 函数功能：动作:搜索
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#   searchlist : 搜索列表
#       search : 搜索
#        prune : 清理
# ================================================== 
function Action_Searchs(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Searchs()：参数<action_name>不能为空'  &&    return 1
	#------------- 功能主体 -------------#
	# 搜索列表
	if [ "${action_name,,}" == 'searchlist' ]; then
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "searchs" "searchlist" 
	fi
	# 搜索
	if [ "${action_name,,}" == 'search' ]; then
		echo -e "\033[1;37m${LANG_InputArg:-请按如下格式输入相关参数，空格分隔}\033[0m" #白字
		echo "'${LANG_Action_Searchs_01:-关键字}' '[${LANG_Action_Searchs_02:-查询数量}(${LANG_Default:-默认} 5)]'  '[${LANG_Action_Searchs_03:-缓存结果}(true|false<${LANG_Default:-默认}>)]'"
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}):"  input  input2  input3
			[ "${App_Debug}" == 1 ] && echo "input(keyword): ${input}  input2(limit): ${input2}  input3(isCache): ${input3}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					input=`echo ${input} | sed s/\'//g`
					input2=`echo ${input2} | sed s/\'//g`
					input3=`echo ${input3} | sed s/\'//g`
					echo -e "\033[1;${SYS_CmdFontColor}m"docker search --limit \"${input2}\"  \"${input}\" "\033[0m"
					#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
					ActionHandle "searchs" "search" "" "${input}"  "${input3}"  "${input2}"					
					f=false
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi	
	# 清理
	if [ "${action_name,,}" == 'prune' ]; then
		echo -e "\033[1;37m${LANG_Action_Searchs_04:-将删除所有搜索缓存}\033[0m" #白字		
		read -e -p "${LANG_SureDelete:-确定要删除吗}(y:${LANG_Yes:-是} | n:${LANG_No:-否}) [${LANG_Optional:-可选选项}]:" input
		[ "${App_Debug}" == 1 ] && echo "input: ${input}"
		if [ "${input,,}" == "y" ];then
			#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
			ActionHandle "searchs" "prune" 
			if [ "$?" == "0" ];then				
				[ ! -d "${TmpDir_Searchs}" ] && mkdir -p "${TmpDir_Searchs}"
				[ ! -d "${TmpDir_Searchs_Sub}" ] && mkdir -p "${TmpDir_Searchs_Sub}"
				echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字				
			else				
				echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
			fi
		fi
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset input2
	unset input3
	unset option
}
##### 函数测试 #####
#Action_Searchs  "search"
#Action_Searchs  "prune"


# ================================================== 
# 函数名称：Action_Search					  	 
# 函数功能：动作:搜索
# 函数参数：			 		 	  				 
#     		 -$1:   单项名称(镜像名称) <已重写变量>
#     		 $2:   动作名称      	 
#     	     $3:   结果列表索引(来自用户输入)	  	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#     details : 单项详情
#        pull : 拉取镜像
# ================================================== 
function Action_Search(){
	# 单项名称(镜像名称)	
	item_name="$1"
	# 动作
	action_name="$2"
	# 索引
	action_index="$3"
	[ "${action_name}" == "" ] &&  echo 'Action_Search()：参数<action_name>不能为空'  &&    return 1
	#[ "${item_name}" == "" ] &&  echo 'Action_Search()：参数<item_name>不能为空'  &&    return 1
	[ "${action_index}" == "" ] &&  echo 'Action_Search()：参数<action_index>不能为空'  &&    return 1
	#重写变量
	## Note: 为减轻外部传递参数的复杂，在此重写变量，使得第一个参数作用暂时无
	## ${SearchsID} 来自 Infos_Searchs
	item_name="`eval echo \\${INFO_Searchs_${SearchsID}_Name[${action_index}]}`"
	
	#------------- 信息头 -------------#
	echo -e "\033[1;37m${LANG_CurrentSelected:-当前选择的} ${LANG_SearchItem:-搜索项}:\033[0m"  #白字 
	if [ "${SYS_Lang}" == "cn" ];then
		printf "\033[1;37m%-67s %-22s\033[0m\n"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	else
		printf "\033[1;37m%-65s %-20s\033[0m\n"   "${LANG_Top_Name:-名称}"    "${LANG_Top_Action:-动作}"   #白字
	fi
	printf "%-65s %-20s\n"  "${item_name}"    "${action_name}" #灰字
	echo
	#------------- 信息头 -------------#
	#------------- 功能主体 -------------#
	# ${var,,} : 将字符串转换为小写
	# 单项详情
	if [ "${action_name,,}" == 'details' ]; then
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "search" "details" "${SearchsID}" "${action_index}" 
	fi
	# 拉取镜像
	if [ "${action_name,,}" == 'pull' ]; then	
		echo -e "\033[1;${SYS_CmdFontColor}m"docker pull  "${item_name}" "\033[0m"
		#ActionHandle "项名称" "动作名称" "动作目标" "输入值"  其它值
		ActionHandle "search" "pull" "" "${item_name}" 
		if [ "$?" == "0" ];then
			# 刷新数据
			CacheHandle "images" "" 0 true
			# 刷新子数据
			for ActionSearchPull_ID in ${INFO_Images_ID[@]}
			do
				# 不存在文件时，表示没有缓存数据
				[ ! -e "${TmpDir_Images_Sub}DATA_Images_${ActionSearchPull_ID}.sh" ] && CacheHandle "image" "${ActionSearchPull_ID}" "" true
			done
			unset ActionSearchPull_ID
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Search#pull#<SearchPull>#Success#docker pull ${item_name}">>"${TmpDir_Log}Images/Images.log"
			echo -e "\033[1;32m${LANG_ExecutionSuccess:-执行成功}\033[0m"  #绿字
		else
			# 日志记录
			echo "LOG`date +%s`#`date "+%Y-%m-%d %H:%M:%S"`#Search#pull#<SearchPull>#Fail#docker pull ${item_name}">>"${TmpDir_Log}Images/Images.log"
			echo -e "\033[1;31m${LANG_ExecutionFailure:-执行失败}\033[0m" #红字
		fi
	fi
	#------------- 功能主体 -------------#
	# 清除变量
	#unset item_name
	unset action_index	
	unset action_name
}
##### 函数测试 #####
# Action_Searchs  "search"
# echo
# Action_Search  "hello-world"  "details"  1


# ================================================== 
# 函数名称：Action_Others 					  	 
# 函数功能：动作:其它
# 函数参数：			 		 	  				 
#     		 $1:   动作名称      	 
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的动作：	
#          refreshcache : 刷新缓存
#               readlog : 读取日志
#            cleanuplog : 清理日志
#           dockerinfos : (Docker)系统信息
#                   set : 设置
#                 about : 关于
# ================================================== 
function Action_Others(){
	# 动作
	action_name="$1"
	[ "${action_name}" == "" ] &&  echo 'Action_Others()：参数<action_name>不能为空'  &&    return 1
	#------------- 功能主体 -------------#
	# 刷新缓存
	if [ "${action_name,,}" == 'refreshcache' ]; then	
		# ${var,,} : 将字符串转换为小写
		echo -e "\033[1;31m${LANG_Menu_Others01_02:-注意: 这将删除并重构所有缓存}\033[0m" 
		read -p "${LANG_Menu_Others01_03:-是否继续}(y:${LANG_Yes:-是} | n:${LANG_No:-否}):" Menu_Input	
		if [ "${Menu_Input}" != "" ] && [ "${Menu_Input,,}" == "y" ];then 		
			PruneHandle "images" 2  1
			PruneHandle "networks" 2  1
			PruneHandle "volumes" 2  1
			PruneHandle "containers" 2  1
			Init_Infos 1
		fi
	fi
	# 读取日志
	if [ "${action_name,,}" == 'readlog' ]; then
		Show_Logs  "${SYS_Style}"
	fi
	# 清理日志
	if [ "${action_name,,}" == 'cleanuplog' ]; then
		# ${var,,} : 将字符串转换为小写
		echo -e "\033[1;31m${LANG_Menu_Others03_02:-注意: 这将删除所有日志文件}\033[0m" 
		read -p "${LANG_Menu_Others03_03:-是否继续}(y:${LANG_Yes:-是} | n:${LANG_No:-否})" Menu_Input
		if [ "${Menu_Input}" != "" ] && [ "${Menu_Input,,}" == "y" ];then 		
			# 删除相关目录及文件
			rm -rf  "${TmpDir_Log}"*
			# 重构相关目录
			Init_FileDir
		fi
	fi
	# (Docker)系统信息
	if [ "${action_name,,}" == 'dockerinfos' ]; then
		Show_SysInfo
	fi	
	# 设置
	if [ "${action_name,,}" == 'set' ]; then
		echo -e "\033[1;31m${LANG_Attention:-注意}:\033[0m" #红字
		echo -e "\033[1;31m     ${LANG_Action_Others_01:-当前设置不能持久化，只在当前环境有效}\033[0m" #红字
		echo -e "\033[1;31m     ${LANG_Action_Others_02:-持久化，请在user.conf中设置}\033[0m" #红字
		echo
		echo -e "\033[1;37m${LANG_Action_Others_03:-可设置的变量列表}\033[0m" #白字	
		echo "# ${LANG_Action_Others_04:-语言}"
		echo "S_Lang=""${SYS_Lang}"
		echo 
		echo "# ${LANG_Action_Others_05:-字体(字符串) 颜色}"
		echo "S_FontClor=""${SYS_FontClor}"
		echo 
		echo "# ${LANG_Action_Others_06:-线条颜色}"
		echo "S_LineClor=""${SYS_LineClor}"
		echo 
		echo "# ${LANG_Action_Others_14:-线条最大长度(单位:字符)}"
		echo "S_LineMax=""${SYS_LineMax}"
		echo 
		echo "# ${LANG_Action_Others_07:-标题}"
		echo "S_Title=""${SYS_Title}"
		echo 
		echo "# ${LANG_Action_Others_08:-缓存超时}(s)"
		echo "S_Timeout=""${SYS_Timeout}"
		echo 
		echo "# ${LANG_Action_Others_09:-显示风格(0:背景<默认>|1:无背景)}"		
		echo "S_Style=""${SYS_Style}"
		echo 
		echo "# ${LANG_Action_Others_10:-出口网络接口}"
		echo "S_NetInterface=""${SYS_InternetInterface}"
		echo 
		echo "# ${LANG_Action_Others_11:-主机名}"
		echo "S_HostName=""${SYS_HostName}"
		echo 
		echo "# ${LANG_Action_Others_12:-小屏尺寸(单位:字符)}"
		echo "S_SmallSize=""${SYS_SmallSize}"
		echo
		echo "${LANG_Action_Others_13:-请按key=value的格式进行设置，建议使用引号}"
		FontColorTest 1
		echo
		f=true
		while $f
		do
			read -e -p "${LANG_PleaseInput:-请输入}(e:${LANG_Exit:-退出}|OK:${LANG_Ok:-完成}):"  input
			[ "${App_Debug}" == 1 ] && echo "input: ${input}"	
			if [ "${input,,}" != "e" ];then
				if [ "${input}" != "" ];then					
					if [ "${input,,}" == "ok" ];then						
						# 语言
						[ "${S_Lang}" != "" ] && SYS_Lang="${S_Lang}"
						# 字体(字符串) 颜色
						[ "${S_FontClor}" != "" ] && SYS_FontClor="${S_FontClor}"
						# 线条颜色
						[ "${S_LineClor}" != "" ] && SYS_LineClor="${S_LineClor}"
						# 标题
						[ "${S_Title}" != "" ] && SYS_Title="${S_Title}"
						# 缓存超时(s)
						[ "${S_Timeout}" != "" ] && SYS_Timeout="${S_Timeout}"
						# 显示风格(0:背景<默认>|1:无背景)		
						[ "${S_Style}" != "" ] && SYS_Style="${S_Style}"
						# 出口网络接口
						[ "${S_NetInterface}" != "" ] && SYS_InternetInterface="${S_NetInterface}"
						# 主机名
						[ "${S_HostName}" != "" ] && SYS_HostName="${S_HostName}"
						# 小屏尺寸(单位:字符)
						[ "${S_SmallSize}" != "" ] && SYS_SmallSize="${S_SmallSize}"
						# 线条最大长度(单位:字符)
						[ "${S_LineMax}" != "" ] && SYS_LineMax="${S_LineMax}"	
						unset S_Lang	
						unset S_FontClor	
						unset S_LineClor	
						unset S_Title	
						unset S_Timeout	
						unset S_Style	
						unset S_NetInterface	
						unset S_HostName	
						unset S_SmallSize	
						unset S_LineMax	
						Init_Conf 1  #从环境中读取配置
						Init_Lang
						f=false
					else
						# 设置变量
						eval ${input}
						# 显示
						setStr=""
						[ "${S_Lang}" != "" ] && setStr=${setStr}'S_Lang='"${S_Lang}  "
						[ "${S_FontClor}" != "" ] && setStr=${setStr}'S_FontClor='"${S_FontClor}  "
						[ "${S_LineClor}" != "" ] && setStr=${setStr}'S_LineClor='"${S_LineClor}  "
						[ "${S_Title}" != "" ] && setStr=${setStr}'S_Title='"${S_Title}  "
						[ "${S_Timeout}" != "" ] && setStr=${setStr}'S_Timeout='"${S_Timeout}  "
						[ "${S_Style}" != "" ] && setStr=${setStr}'S_Style='"${S_Style}  "
						[ "${S_NetInterface}" != "" ] && setStr=${setStr}'S_NetInterface='"${S_NetInterface}  "
						[ "${S_HostName}" != "" ] && setStr=${setStr}'S_HostName='"${S_HostName}(`hostname`)  "
						[ "${S_SmallSize}" != "" ] && setStr=${setStr}'S_SmallSize='"${S_SmallSize}  "
						[ "${S_LineMax}" != "" ] && setStr=${setStr}'S_LineMax='"${S_LineMax}  "
						printf "${setStr}\n"
						echo
					fi
				else
					echo "${LANG_Warning_InputNotEmpty:-警告: 输入不能为空...}"
					echo
				fi
			else
				f=false
			fi			
		done
	fi
	# 关于
	if [ "${action_name,,}" == 'about' ]; then
		Show_About
	fi	
	#------------- 功能主体 -------------#
	# 清除变量
	unset action_name
	unset input
	unset S_SmallSize
	unset S_HostName
	unset S_NetInterface
	unset S_Style
	unset S_Timeout
	unset S_Title
	unset S_LineClor
	unset S_FontClor
	unset S_Lang
	unset setStr
}
##### 函数测试 #####
#Action_Others  "set"


# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#
# ${1,,} : 将字符串转换为小写
# 输出帮助文档
[ "${1,,}" == '--help' ] &&  outhelp


# ----函数调用------------------------------------------------------------------------------------------#







