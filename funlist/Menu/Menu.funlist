#!/bin/bash

##########################################################
#[FunList]
# [简述]
# 
# 执行环境: 宿主机
# 调用方式: ./  source  sh 
# 调用参数: 			 		 	  				  
#     	   [$1]:   --help 查看帮助文档		      	  
#
# 备注: 静态函数列表，使用source包含在文件头部
##########################################################
# 备注
# exit 1  : 报错退出
# exit 0  : 无错误退出
# return int  : 函数内部，只能返回整数(0-255)
#               推荐使用return来中止后续执行
##########################################################

# ----预处理--------------------------------------------#

# 加载模式(1:主动|0:被动<默认>)
Sys_LoadMode="${Sys_LoadMode:-0}"
# 调试开关
Sys_Debug="${Sys_Debug:-0}"
App_Debug="${App_Debug:-0}"
# 默认分隔符
oldIFS=$IFS
# 测试:开关(true|false)
App_testON=false
# 测试:文件名和目录名
App_testFileName=.env
App_testDirName=lib
# 测试:多条件关系(and|or)
App_testMult=and
# 是否跳转到当前脚本目录(1:是|0:否)
App_toScriptDir="0"

# ================================================== 
# 函数名称: MAP_SET_FileList
# 函数功能: 映射表:文件列表	 
# 函数参数:  
#     	 [$1]:   文件路径(${BASH_SOURCE[0]}<默认>)
#     	         ./funlist/a/bc.sh 
#     	          /funlist/a/bc.sh 
#
# 变量列表:
#               ${MAP_Index} : MAP全局索引
#               ${MAP_ID[0]} : ID(md5sum(文件路径))
#      ${MAPSET_FileList[0]} : 文件列表(数组)
#
# 返回值:  
# 		$?: 获取调用结果(调用后立即使用)
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET_FileList(){
	# ${BASH_SOURCE[0]}: ./funlist/a/bc.sh
	#                      funlist/a/bc.sh
	# dirname ${BASH_SOURCE[0]}: ./funlist/a
	#                              funlist/a
	# 删除行首空格: sed 's/^[ \t]*//g'
	# 删除行尾空格: sed 's/[ \t]*$//g'	
	
	# ./funlist/a/bc.sh  =>  funlist/a/bc.sh
	#  /funlist/a/bc.sh
	# 文件
	local File="${1:-${BASH_SOURCE[0]}}"
	[ "${File:0:1}" == "." ]  &&  File="`echo "${File}" | sed 's/^\.//g' | sed 's/^\///g'`"
	# ID(md5sum(文件路径))
	local TMP_ID="`echo -n "${File}" | md5sum | cut -d ' ' -f 1`"
		
	# 存在记录时，使用已存记录的索引	
	for key in ${!MAP_ID[@]}
	do
		if [ "${TMP_ID}" == "${MAP_ID[$key]}" ];then
			#echo "ID hit..."
			local MAP_NextIndex="${MAP_Index}"
			MAP_Index="${key}"
		fi
	done
	
	# MAP全局索引
	MAP_Index="${MAP_Index:-0}"
	# ID(md5sum(文件路径))
	MAP_ID[${MAP_Index}]="${TMP_ID}"
	# 文件列表
	MAPSET_FileList[${MAP_Index}]="${File}"
	let MAP_Index++	
	# 恢复索引
	[ "${MAP_NextIndex}" != "" ] &&  MAP_Index="${MAP_NextIndex}"
}
##### 函数测试 #####
# MAP_SET_FileList
# 执行时间: 00:08
# MAP_SET_FileList  "/funlist/a/bc1.sh"
# 执行时间: 00:04
# MAP_SET_FileList  "/funlist/a/bc2.sh"
# MAP_SET_FileList  "/funlist/a/bc3.sh"
# MAP_SET_FileList  "/funlist/a/bc4.sh"
# MAP_SET_FileList  "/funlist/a/bc5.sh"
# MAP_SET_FileList  "/funlist/a/bc6.sh"
# MAP_SET_FileList  "/funlist/a/bc7.sh"
# MAP_SET_FileList  "/funlist/a/bc8.sh"
# MAP_SET_FileList  "/funlist/a/bc9.sh"
# MAP_SET_FileList  "/funlist/a/bc10.sh"
# MAP_SET_FileList
# 执行时间: 00:43 

# ================================================== 
# 函数名称: FUN_Source
# 函数功能: 文件加载
# 函数参数:  
#     	 [$1]:   文件路径 
# 
# ================================================== 
function FUN_Source(){
	#需要加载的文件
	local SourceFile="${1:-}"
	
	#设置 映射表.文件列表
	[ -e "${SourceFile}" ] &&  MAP_SET_FileList "${SourceFile}"
	#加载文件
	if [ "${SourceFile}" != "" ];then
		# 加载模式(1:主动|0:被动<默认>)
		Sys_LoadMode="1"
		if [ -e "${SourceFile}" ];then 
			echo "[FUN_Source] ${SourceFile}"
			source "${SourceFile}"  
		else 
			echo "[FUN_Source:File not exist] ${SourceFile}"
		fi
	fi
}
##### 函数测试 #####
# FUN_Source  "/funlist/a/bc1.sh"
# FUN_Source  "/funlist/a/bc2.sh"
# FUN_Source  "/funlist/a/bc3.sh"
# FUN_Source  "/funlist/a/bc4.sh"
# FUN_Source  "/funlist/a/bc5.sh"
# FUN_Source  "/funlist/a/bc6.sh"
# FUN_Source  "/funlist/a/bc7.sh"
# FUN_Source  "/funlist/a/bc8.sh"
# FUN_Source  "/funlist/a/bc9.sh"
# FUN_Source  "/funlist/a/bc10.sh"

# ================================================== 
# 函数名称: MAP_SET 
# 函数功能: 映射表:设置 
# 函数参数: 
#     	 [$1]:   更多数据(1:是|0:否<默认>) 
#
# 变量列表:
#         ${MAP_FileName[0]} : 文件名称(bc.sh)
#     ${MAP_AbsolutePath[0]} : 绝对路径(/mnt/.../funlist/a)
#     ${MAP_RelativePath[0]} : 相对路径(funlist/a)
#          ${MAP_FunList[0]} : 函数列表(,号分隔)
#      ${MAP_FunList_Raw[0]} : 函数列表(原生,包含换行符)
#     ${MAP_FunList_Array_0} : 函数列表(数组)
#                              #eval echo "\${MAP_FunList_Array_${MAP_Index}[0]}"  
# 返回值: 
# 		$?: 获取调用结果(调用后立即使用) 
# 		    0: 执行成功 
# 		    1: 执行失败 
# 
# ================================================== 
function MAP_SET(){ 
	#更多数据(1:是|0:否<默认>)
	local isMore="${1:-0}"
	
	# 设置数据	
	for key in ${!MAPSET_FileList[@]}
	do
		# 文件名称(bc.sh)
		[ "${MAP_FileName[${key}]}" == "" ] && MAP_FileName[${key}]="${MAPSET_FileList[$key]##*/}"
		# 绝对路径(/mnt/.../funlist/a)
		[ "${MAP_AbsolutePath[${key}]}" == "" ] && MAP_AbsolutePath[${key}]="$(cd $(dirname ${MAPSET_FileList[$key]}); pwd)"
		# 相对路径(funlist/a) 
		[ "${MAP_RelativePath[${key}]}" == "" ] && MAP_RelativePath[${key}]="`dirname ${MAPSET_FileList[$key]}`"
		if [ "${isMore}" == "1" ]; then
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]="`cat ${MAPSET_FileList[$key]} | grep "^function.*" | sed 's/function//g' | sed 's/()//g' | sed 's/{//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g'`"
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=\(`echo "${MAP_FunList_Raw[${key}]}"`\)
			# 函数列表(,号分隔)	
			for i in `eval echo '${MAP_FunList_Array_'"${key}"'[@]}'`
			do
				[ "${FunList}" != "" ] &&  FunList="${FunList},${i}" || FunList="${i}"
			done
			MAP_FunList[${key}]="${FunList}"
			unset FunList
		else 
			# 函数列表(原生,包含换行符)
			MAP_FunList_Raw[${key}]=""
			# 函数列表(数组)
			eval MAP_FunList_Array_${key}=""
			# 函数列表(,号分隔)
			MAP_FunList[${key}]=""
		fi
		
	done

	# 清除变量
	unset FunList	
}
##### 函数测试 #####
# FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
# MAP_SET 
#
# echo "ID: ${MAP_ID[0]}"
# echo "FileName: ${MAP_FileName[0]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[0]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[0]}"
# echo "MAP_FunList: ${MAP_FunList[0]}"
# echo 
# echo "ID: ${MAP_ID[1]}"
# echo "FileName: ${MAP_FileName[1]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[1]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[1]}"
# echo "MAP_FunList: ${MAP_FunList[1]}"
# echo 
# echo "ID: ${MAP_ID[2]}"
# echo "FileName: ${MAP_FileName[2]}"
# echo "AbsolutePath: ${MAP_AbsolutePath[2]}"
# echo "MAP_RelativePath: ${MAP_RelativePath[2]}"
# echo "MAP_FunList: ${MAP_FunList[2]}"

# ================================================== 
# 函数名称: MAP_GET					  	 
# 函数功能: 映射表:获取	 
# 函数参数: 			 		 	  				 
#     	 $1: 查询字段
#     	 $2: 条件字段01(key)
#     	 $3: 条件内容01(value)
#      [$4]: 条件字段02(key)(and)     		      	 
#      [$5]: 条件内容02(value)
#  
# 可用查询字段:
#               MAP_ID : ID
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数列表(,号分隔)
#      MAP_FunList_Raw : 函数列表(原生,包含换行符)
#
# 可用条件字段:
#         MAP_FileName : 文件名称
#     MAP_AbsolutePath : 绝对路径(/mnt/.../funlist/a)
#     MAP_RelativePath : 相对路径(funlist/a)
#          MAP_FunList : 函数名称
#
# 返回值:  									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 			 		  		 	  
# 	                       Str : 结果(取值为最后一个匹配的结果) 
# 	                 ${Result} : 结果(取值为最后一个匹配的结果) 
# 	       ${MAP_Result_Index} : 结果 索引
# 	          ${MAP_Result_ID} : 结果 ID
# 	    ${MAP_Result_FileName} : 结果 文件名称
# 	${MAP_Result_AbsolutePath} : 结果 绝对路径
# 	${MAP_Result_RelativePath} : 结果 相对路径
# 	     ${MAP_Result_FunList} : 结果 函数列表(,号分隔)
# 	  ${MAP_Result_FunListRaw} : 结果 函数列表(原生,包含换行符)			 									 	  
# ================================================== 
function MAP_GET(){
	#查询字段
	local QueryField="${1}"
	#条件字段01
	local ConditionKey_01="${2}"	
	#条件内容01
	local ConditionValue_01="${3}"
	#条件字段02
	local ConditionKey_02="${4:-}"	
	#条件内容02
	local ConditionValue_02="${5:-}"
	
	if [ "${ConditionKey_02}" != "" ];then
		# 多条件查询
		for key in ${!MAP_FileName[@]}
		do
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"						
			local c2="`eval echo "\\${${ConditionKey_02}[${key}]}" | grep -w "${ConditionValue_02}"`"						
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			#c2="`echo "${c2}" | grep -w "${ConditionValue_02}"`"		
			if [ "${c1}" != "" ] && [ "${c2}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi 
		done 
	else
		# 单条件查询
		for key in ${!MAP_FileName[@]}
		do			
			local c1="`eval echo "\\${${ConditionKey_01}[${key}]}" | grep -w "${ConditionValue_01}"`"			
			#c1="`echo "${c1}" | grep -w "${ConditionValue_01}"`"		
			if [ "${c1}" != "" ];then
				eval MAP_Result="\${${QueryField}[${key}]}"
				MAP_Result_Index="${key}"
				MAP_Result_ID="${MAP_ID[${key}]}"
				MAP_Result_FileName="${MAP_FileName[${key}]}"
				MAP_Result_AbsolutePath="${MAP_AbsolutePath[${key}]}"
				MAP_Result_RelativePath="${MAP_RelativePath[${key}]}"
				MAP_Result_FunList="${MAP_FunList[${key}]}"
				MAP_Result_FunListRaw="${MAP_FunListRaw[${key}]}"
			fi
		done
	fi
	# 返回结果
	echo ${MAP_Result}	

	# 清除变量
	#unset MAP_Result
}
##### 函数测试 #####
# MAP_GET "MAP_RelativePath"  "MAP_FileName" "ta.sh"
# MAP_GET "MAP_RelativePath" "MAP_FunList" "MAP_SETs" "MAP_FileName" "ta.sh"
# echo MAP_RelativePath: ${MAP_Result}
##### 使用示例 ##### 
#脚本所在目录
# SPath="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "ta.sh"`"
# echo MAP_AbsolutePath: ${SPath}

# ================================================== 
# 函数名称: testENV 
# 函数功能: 测试环境是否符合脚本要求 
# 函数参数: 
# 
# 上下文变量: 
# 		 App_testON : 开关(true|false) 
#  App_testFileName : 文件名 
# 	App_testDirName : 目录名 
# 	   App_testMult : 多条件关系(and|or) 
# 返回值: 
# 		         Str : 项目实际路径(/.../funlist 或 /)
# ${RealProjectPath} : 项目实际路径(/.../funlist 或 /)
# ================================================== 
function testENV(){
	# 原理：检测当前路径下是否有指定的文件或目录
	#
	# ${FUNCNAME[0]} : 当前函数名
	# 获取符合条件的路径( /mnt/f_DockerData )
	# -d : 判断是否为目录，存在为true
	# -e : 判断是否为文件，存在为true
	# 由于！取反，实际结果: 
	# && :  任一个true，则执行循环体 (or)
	# || :  都为true，则执行循环体 (and)
	
	local ScriptDir="`MAP_GET "MAP_AbsolutePath" "MAP_FunList" "${FUNCNAME[0]}"`"
	cd ${ScriptDir}
	if [ "${App_testMult}" == "and" ];then
		# 条件关系: 和(and)
		while ( [ ! -d $App_testDirName ] || [ ! -e $App_testFileName ]  )
		do				
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	elif [ "${App_testMult}" == "or" ];then
		# 条件关系: 或(or)
		while ( [ ! -d $App_testDirName ] && [ ! -e $App_testFileName ]  )
		do
			# 根目录，退出循环，避免死循环
			if [ `pwd` == '/' ]; then					
				break
			else
				cd ..					
			fi
		done
		RealProjectPath=`pwd`
	fi		
	cd ${ScriptDir}
	echo ${RealProjectPath}
}
#testENV

# 使用环境测试
[ $App_testON == 'true' ] && testENV
#默认处理: 设置此脚本的相关信息
[ "${Sys_LoadMode}" == "0" ] &&  FUN_Source
# FUN_Source  "tmp/a/ta.sh"
# FUN_Source  "tmp/b/tb.sh"
#推荐在加载完所有文件后使用
[ "${Sys_LoadMode}" == "0" ] &&  MAP_SET 


# 脚本名称
SCRIPT_NAME=${BASH_SOURCE[0]##*/}
# 脚本所在目录
# BASH_SOURCE[0]: 存储脚本的名称，如 funlist/a/bc.sh
# 注: 只适用于bash shell，不会改变cd目录
#     SCRIPT_DIR=$(cd $(dirname $0); pwd)  #不准确# $0不同方式调用结果不同
## OK # ./XXX.sh 	  :  /mnt/f_DockerData/scripts
## OK # source XXX.sh :  /mnt/f_DockerData/scripts
## OK # bash XXX.sh	  :  /mnt/f_DockerData/scripts
## NO # sh XXX.sh	  :  Error
#SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd) #改用如下方式# 
#SCRIPT_DIR="`MAP_GET "MAP_AbsolutePath" "MAP_FileName" "${SCRIPT_NAME}"`"
# 跳转到脚本目录
[ "${App_toScriptDir}" == "1" ] && cd ${SCRIPT_DIR}

# Debug
[ "${Sys_Debug}" == 1 ] && echo RealProjectPath: $RealProjectPath
[ "${Sys_Debug}" == 1 ] && echo PWD: $(pwd)
# ----预处理--------------------------------------------#


# ----参数处理------------------------------------------------------------------------------------------#

# ----参数处理------------------------------------------------------------------------------------------#


# ----函数定义------------------------------------------------------------------------------------------#

# ================================================== 
# 函数名称: outhelp		 					  	 
# 函数功能: 帮助文档	  	  							 
# 函数参数: 			 		 	  				 
# 			 									 	 
# 返回值:  									 	  
# 		 Document	 									 	  
# ================================================== 
function outhelp()
{			
	echo
	echo "xxxxxxxx"
	echo
	echo "先引用该文件，再调用相关函数"
	echo "source ${SCRIPT_NAME}"
	echo
	echo "FunctionName  arg1  arg2  ... "
	echo "       参数列表: "
	echo "         arg1: xxxxxx。必需"
	echo "         arg2: xxxxx。可选"
	echo  	 
	echo "示例: "
	echo "FunctionName  8.0"  
		
	return 0 2>/dev/nul
	exit 0
}


# ================================================== 
# 函数名称：Menu_Top	 		
# 函数功能：菜单:头部		
# 函数参数：			 		 	
#     	   [$1]:   字符串(默认:Docker Management)		      	 
#     	   [$2]:   字符串颜色(默认:36)	      	 
#     	   [$3]:   线条颜色(默认:32)      	 
# 			 								
# 颜色:
#    30 : 黑色   
#    31 : 红色   
#    32 : 绿色   
#    33 : 黃色   
#    34 : 蓝色   
#    35 : 紫红色 
#    36 : 青蓝色 
#    37 : 白色    								
#
# 返回值： 								
# 			 									 	  
# ================================================== 
function Menu_Top(){
	# 字符串	
	Menu_Top_Str="${1:-Docker Management}"		
	# 字符串颜色
	Menu_Top_StrClor="${2:-36}"
	# 线条颜色
	Menu_Top_LineClor="${3:-32}"
		
	# 终端列数（宽）
	Menu_Top_TerminalColumns=`tput cols`
	# 终端行数（高）
	#Menu_Top_TerminalLines=`tput lines`
	# 最大长度85(-gt >)
	[ "${Menu_Top_TerminalColumns}" -gt "${SYS_LineMax}" ] && Menu_Top_TerminalColumns=85
	# 字符串长度
	Menu_Top_StrLength="${#Menu_Top_Str}"
	# 字符串线条长度
	Menu_Top_StrLineLength="$((${Menu_Top_TerminalColumns}-${Menu_Top_StrLength}-2))"
	Menu_Top_StrLineLength="$((${Menu_Top_StrLineLength}/2))"
	
	[ "${App_Debug}" == 1 ] && echo Menu_Top_StrLength: $Menu_Top_StrLength
	[ "${App_Debug}" == 1 ] && echo Menu_Top_TerminalColumns: $Menu_Top_TerminalColumns
	[ "${App_Debug}" == 1 ] && echo Menu_Top_StrLineLength: $Menu_Top_StrLineLength	
	
	
	RepeatStr  "=" "${Menu_Top_TerminalColumns}" "${Menu_Top_LineClor}"  1
	echo -e `RepeatStr  "X" "${Menu_Top_StrLineLength}" "${Menu_Top_LineClor}"` "\033[1;${Menu_Top_StrClor}m${Menu_Top_Str}\033[0m" `RepeatStr  "X" "${Menu_Top_StrLineLength}" "${Menu_Top_LineClor}" 1`
	RepeatStr  "-" "${Menu_Top_TerminalColumns}" "${Menu_Top_LineClor}"  1
	TestStr="`[ "${SYS_Test}" == "1" ] && echo 'TestMode'`"
	echo -e "\033[1;${Menu_Top_StrClor}m${LANG_Menu_Top_01:-主机名}: ${SYS_HostName}(`hostname`)   ${LANG_Menu_Top_02:-主机IP}(Hip): ${SYS_HostIp}\033[0m    \033[1;31m${TestStr}\033[0m"  
	RepeatStr  "=" "${Menu_Top_TerminalColumns}" "${Menu_Top_LineClor}"  1
	
	# 清除变量
	unset Menu_Top_Str
	unset Menu_Top_StrClor
	unset Menu_Top_LineClor
	unset Menu_Top_TerminalColumns
	unset Menu_Top_StrLength
	unset Menu_Top_StrLineLength	
	unset TestStr	
}
##### 函数测试 #####
#Menu_Top "Docker Management"  31 36
#Menu_Top 

# ================================================== 
# 函数名称：Menu_Nav 		
# 函数功能：菜单:导航条	
# 函数参数：			 		 	
#     	   [$1]:   字符串颜色(默认:36)	      	 
#     	   [$2]:   线条颜色(默认:32)      	 
#     	 [$3-9]:   字符串   	 
# 			 								
# 颜色:
#    30 : 黑色   
#    31 : 红色   
#    32 : 绿色   
#    33 : 黃色   
#    34 : 蓝色   
#    35 : 紫红色 
#    36 : 青蓝色 
#    37 : 白色    								
#
# 返回值： 								
# 			 									 	  
# ================================================== 
function Menu_Nav(){
	# 字符串颜色
	Menu_Nav_StrClor="${1:-36}"
	# 线条颜色
	Menu_Nav_LineClor="${2:-32}"
	# 字符串
	Str_00="\033[1;${Menu_Nav_LineClor}m>\033[0m"
	Str_01="\033[1;${Menu_Nav_StrClor}m${3}\033[0m"
	Str_02="\033[1;${Menu_Nav_StrClor}m${4}\033[0m"
	Str_03="\033[1;${Menu_Nav_StrClor}m${5}\033[0m"
	Str_04="\033[1;${Menu_Nav_StrClor}m${6}\033[0m"
	Str_05="\033[1;${Menu_Nav_StrClor}m${7}\033[0m"
	Str_06="\033[1;${Menu_Nav_StrClor}m${8}\033[0m"
	Str_07="\033[1;${Menu_Nav_StrClor}m${9}\033[0m"
	
	[ "${3}" != "" ] && Strs="${Strs}${Str_01}"
	[ "${4}" != "" ] && Strs="${Strs}${Str_00}${Str_02}"
	[ "${5}" != "" ] && Strs="${Strs}${Str_00}${Str_03}"
	[ "${6}" != "" ] && Strs="${Strs}${Str_00}${Str_04}"
	[ "${7}" != "" ] && Strs="${Strs}${Str_00}${Str_05}"
	[ "${8}" != "" ] && Strs="${Strs}${Str_00}${Str_06}"
	[ "${9}" != "" ] && Strs="${Strs}${Str_00}${Str_07}"
	# 输出字符串
	echo -e "${Strs}"
	
	# 清除变量
	unset Menu_Nav_StrClor
	unset Menu_Nav_LineClor
	unset Str_00
	unset Str_01
	unset Str_02
	unset Str_03
	unset Str_04
	unset Str_05
	unset Str_06
	unset Str_07
	unset Strs
}
##### 函数测试 #####
# Menu_Nav 36 32  "主菜单" 
# Menu_Nav 36 32  "主菜单1"  "镜像管理2"  "镜像管理3"  "镜像管理4"  "镜像管理5"  "镜像管理6"  "镜像管理7"

# ================================================== 
# 函数名称：Menu_Footer	 		
# 函数功能：菜单:底部		
# 函数参数：			 		 	
#     	   [$1]:   字符串颜色(默认:36)	      	 
#     	   [$2]:   线条颜色(默认:32)      	 
#     	   [$3]:   顶级菜单(1:是|0:否<默认>)      	 
# 			 								
# 颜色:
#    30 : 黑色   
#    31 : 红色   
#    32 : 绿色   
#    33 : 黃色   
#    34 : 蓝色   
#    35 : 紫红色 
#    36 : 青蓝色 
#    37 : 白色    								
#
# 返回值： 								
# 			 									 	  
# ================================================== 
function Menu_Footer(){		
	# 字符串颜色
	Menu_Footer_StrClor="${1:-36}"
	# 线条颜色
	Menu_Footer_LineClor="${2:-32}"
	# 顶级菜单(1:是|0:否<默认>)  
	isTopLevelMenu="${3:-0}"
	
	# 终端列数（宽）
	Menu_Footer_TerminalColumns=`tput cols`
	# 终端行数（高）
	#Menu_Footer_TerminalLines=`tput lines`
	# 最大长度85(-gt >)
	[ "${Menu_Footer_TerminalColumns}" -gt "${SYS_LineMax}" ] && Menu_Footer_TerminalColumns=85
	
	
	[ "${App_Debug}" == 1 ] && echo Menu_Footer_StrLength: $Menu_Footer_StrLength
	[ "${App_Debug}" == 1 ] && echo Menu_Footer_TerminalColumns: $Menu_Footer_TerminalColumns	
	
	RepeatStr  "-" "${Menu_Footer_TerminalColumns}" "${Menu_Footer_LineClor}"  1
	[ "${isTopLevelMenu}" == "1" ] && echo -e "\033[1;${Menu_Footer_StrClor}m      Exit: ${LANG_Menu_Footer_01:-退出}\033[0m"
	[ "${isTopLevelMenu}" == "0" ] && echo -e "\033[1;${Menu_Footer_StrClor}m      M1: ${LANG_Menus_Main:-主菜单}   M2: ${LANG_Menu_Footer_02:-上级菜单}   Exit: ${LANG_Menu_Footer_01:-退出}\033[0m"
	RepeatStr  "=" "${Menu_Footer_TerminalColumns}" "${Menu_Footer_LineClor}"  1
	
	# 清除变量
	unset Menu_Footer_StrClor
	unset Menu_Footer_LineClor
	unset Menu_Footer_TerminalColumns
}
##### 函数测试 #####
# Menu_Footer  31 36 1
# Menu_Footer 


# ================================================== 
# 函数名称：Menu_Handle					  	 
# 函数功能：菜单处理(处理各菜单的输入)
# 函数参数：			 		 	  				 
#     		 $1:   单项名称
#     		 $2:   上级菜单    	 
#     	   [$3]:   只有底部菜单(0:否<默认>|1:是)
#     	   -[$4]:   强制刷新(false:否<默认>|true:是)
# 			 									 	 
# 返回值： 									 	  
# 		$?: 获取调用结果(调用后立即使用)							  
# 		    0: 执行成功							 	
# 		    1: 执行失败								 	
# 
# 支持的单项名称：	
# 处理块 : 发送处理的菜单   #释义
#    main : Menu_Main  #主菜单
#           images : Menu_Images             #子菜单:镜像管理
#                    images_01 : Menu_Images_01         #镜像列表
#            image : Menu_Image              #详情菜单 
#       containers : Menu_Containers         #子菜单:容器管理
#                    containers_01 : Menu_Containers_01 #容器列表	
#        container : Menu_Container          #详情菜单 
#         networks : Menu_Networks           #子菜单:网络管理
#                    networks_01 : Menu_Networks_01     #网络列表
#          network : Menu_Network            #详情菜单 
#          volumes : Menu_Volumes            #子菜单:卷管理
#                    volumes_01 : Menu_Volumes_01       #卷列表
#           volume : Menu_Volume             #详情菜单
#          searchs : Menu_Searchs            #子菜单:搜索管理
#                    searchs_01 : Menu_Searchs_List Menu_Searchs_01  #搜索列表(搜索镜像)
#           search : Menu_Searchs_01_Details #详情菜单 
#           others : Menu_Others             #子菜单:其它
#            other : Menu_
# ================================================== 
function Menu_Handle(){		
	# 项目(转换为小写)
	Item="${1,,}"
	# 上级菜单
	PreviousMenu="$2"
	[ "${Item}" == "" ] &&  echo 'Menu_Handle()：Item 不能为空'  &&    return 1
	[ "${PreviousMenu}" == "" ] &&  echo 'Menu_Handle()：PreviousMenu 不能为空'  &&    return 1
	# 只有脚部菜单
	OnlyFooterMenu="${3:-0}"
	
	# 用户输入
	read -e -p "${LANG_Menu_Handle_01:-请输入}: " Menu_Input
	# 转换为小写
	Menu_Input="${Menu_Input,,}"
	# 终端信息
	Init_Terminal
	
	if [ "${Menu_Input}" == "m1" ];then
		clear
		Menu_Main  "${SYS_FontClor}"
		# 清除变量
		unset Item
		unset PreviousMenu
		unset Menu_Input
		return 0
	elif [ "${Menu_Input}" == "m2" ];then
		clear
		${PreviousMenu}  "${SYS_FontClor}"
		# 清除变量
		unset Item
		unset PreviousMenu
		unset Menu_Input
		return 0
	elif [ "${Menu_Input}" == "exit" ];then		
		# 清除变量
		unset Item
		unset PreviousMenu
		unset Menu_Input
		exit 0		
	else
		if [ "${OnlyFooterMenu}" == "1" ];then
			read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}"
			clear
			${PreviousMenu}  "${SYS_FontClor}"
			# 清除变量
			unset Item
			unset PreviousMenu
			unset Menu_Input
			return 1
		fi
	fi
	  
	
	# 设置变量
	case "${Item}" in
		"main")							
				case "${Menu_Input}" in
					"1")
						# 1.仪表盘
						clear
						Menu_Dashboard  "${SYS_FontClor}"
						;;
					"2")
						# 2.镜像管理
						clear
						Menu_Images	 "${SYS_FontClor}"
						;;
					"3")
						# 3.容器管理
						clear
						Menu_Containers	 "${SYS_FontClor}"
						;;
					"4")
						# 4.网络管理
						clear
						Menu_Networks  "${SYS_FontClor}"
						;;
					"5")
						# 5.卷管理
						clear
						Menu_Volumes  "${SYS_FontClor}"
						;;
					"6")
						# 6.搜索管理
						clear
						Menu_Searchs	 "${SYS_FontClor}"
						;;
					"7")
						# 7.其它
						clear
						Menu_Others	 "${SYS_FontClor}"
						;;						
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:主菜单
						Menu_Main  "${SYS_FontClor}"
						;;
				esac
				;;
		"dashboard")
				# 
				echo dashboard
				;;
		"images")
				case "${Menu_Input}" in
					"1")
						# 1.镜像列表
						clear
						Menu_Images_01 "${SYS_FontClor}"
						;;
					"2")
						# 2.导入镜像
						#clear
						Menu_Images_02  "${SYS_FontClor}"
						;;
					"3")
						# 3.导出镜像
						#clear
						Menu_Images_03  "${SYS_FontClor}"
						;;
					"4")
						# 4.拉取镜像
						#clear
						Menu_Images_04  "${SYS_FontClor}"
						;;
					"5")
						# 5.清理镜像
						#clear
						Menu_Images_05  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:镜像管理
						Menu_Images  "${SYS_FontClor}"
						;;
				esac
				;;
		"images_01")			
				# 镜像详情
				clear				
				Menu_Images_01_Details  "${SYS_FontClor}"
				;;			
		"image")			
				case "${Menu_Input}" in
					"1")
						# 1.镜像删除
						#clear
						Menu_Image_01  "${SYS_FontClor}"
						;;
					"2")
						# 2.镜像修改
						#clear
						Menu_Image_02  "${SYS_FontClor}"
						;;
					"3")
						# 3.镜像导出
						#clear
						Menu_Image_03  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回镜像详情
						Menu_Images_01_Details "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						;;
				esac
				;;			
		"containers")
				case "${Menu_Input}" in
					"1")
						# 1.容器列表
						clear
						Menu_Containers_01 "${SYS_FontClor}"
						;;
					"2")
						# 2.运行容器
						clear
						Menu_Containers_02 "${SYS_FontClor}"
						;;
					"3")
						# 3.导入容器
						#clear
						Menu_Containers_03 "${SYS_FontClor}"
						;;
					"4")
						# 4.导出容器
						#clear
						Menu_Containers_04 "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:容器管理
						Menu_Containers  "${SYS_FontClor}"
						;;
				esac
				;;
		"containers_01")
				# 容器详情
				clear				
				Menu_Containers_01_Details  "${SYS_FontClor}"
				;;				
		"containers_02")
				# 运行容器(TODO List)				
				case "${Menu_Input}" in
					"1")
						clear
						#Menu_Containers_02_*  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:运行容器
						Menu_Containers_02  "${SYS_FontClor}"
						;;
				esac				
				;;				
		"container")
				case "${Menu_Input}" in
					"1")
						#clear
						# ENV_Menu_ContainerStatus: 容器状态(running|exited|paused) : 来自Menu_Containers_01_Details()
						if [ "${ENV_Menu_ContainerStatus}" == "running" ];then
							# 1.停止容器
							Menu_Container_01  "${SYS_FontClor}"  "stop"
						elif [ "${ENV_Menu_ContainerStatus}" == "paused" ];then
							# 1.恢复容器
							Menu_Container_01  "${SYS_FontClor}"  "unpause"
						elif [ "${ENV_Menu_ContainerStatus}" == "exited" ];then
							# 1.启动容器
							Menu_Container_01  "${SYS_FontClor}"  "start"
						fi
						;;
					"2")
						# 2.暂停容器
						#clear
						# ENV_* : 来自Menu_Containers_01_Details()
						# ENV_Menu_ContainerStatus: 容器状态(running|exited|paused) 
						if [ "${ENV_Menu_ContainerStatus}" == "running" ];then
							Menu_Container_02 "${SYS_FontClor}"
						else						
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
							clear
							# 返回容器详情
							Menu_Containers_01_Details "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						fi
						;;					
					"3")
						# 3.重启容器
						#clear
						Menu_Container_03 "${SYS_FontClor}"
						;;					
					"4")
						# 4.容器删除
						#clear
						Menu_Container_04 "${SYS_FontClor}"
						;;					
					"5")
						# 5.容器导出
						#clear
						Menu_Container_05 "${SYS_FontClor}"
						;;					
					"6")
						# 6.容器提交
						#clear
						Menu_Container_06 "${SYS_FontClor}"
						;;					
					"7")
						# 7.进入容器
						#clear
						Menu_Container_07 "${SYS_FontClor}"
						;;					
					"8")
						# 8.容器差异
						#clear
						Menu_Container_08 "${SYS_FontClor}"
						;;					
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回容器详情
						Menu_Containers_01_Details "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						;;
				esac
				;;				
		"networks")
				case "${Menu_Input}" in
					"1")
						# 1.网络列表
						clear
						Menu_Networks_01 "${SYS_FontClor}"
						;;
					"2")
						# 2.创建网络
						#clear
						Menu_Networks_02 "${SYS_FontClor}"
						;;
					"3")
						# 3.删除网络
						#clear
						Menu_Networks_03 "${SYS_FontClor}"
						;;
					"4")
						# 4.清理网络
						#clear
						Menu_Networks_04 "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:网络管理
						Menu_Networks  "${SYS_FontClor}"
						;;
				esac
				;;
		"networks_01")
				# 网络详情
				clear				
				Menu_Networks_01_Details  "${SYS_FontClor}"
				;;			
		"network")
				case "${Menu_Input}" in
					"1")
						# 1.网络删除
						#clear
						Menu_Network_01	 "${SYS_FontClor}"
						;;
					"2")
						# 2.网络连接
						#clear
						Menu_Network_02	 "${SYS_FontClor}"
						;;
					"3")
						# 3.网络断开
						#clear
						Menu_Network_03	 "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回网络详情
						Menu_Networks_01_Details "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						;;
				esac			
				;;			
		"volumes")
				case "${Menu_Input}" in
					"1")
						# 1.卷列表
						clear
						Menu_Volumes_01 "${SYS_FontClor}"
						;;
					"2")
						# 2.创建卷
						#clear
						Menu_Volumes_02 "${SYS_FontClor}"
						;;
					"3")
						# 3.删除卷
						#clear
						Menu_Volumes_03 "${SYS_FontClor}"
						;;
					"4")
						# 4.清理卷
						#clear
						Menu_Volumes_04 "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:卷管理
						Menu_Volumes  "${SYS_FontClor}"
						;;
				esac
				;;
		"volumes_01")
				# 卷详情
				clear				
				Menu_Volumes_01_Details  "${SYS_FontClor}"
				;;
		"volume")
				case "${Menu_Input}" in
					"1")
						# 1.卷删除
						#clear
						Menu_Volume_01  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回卷详情
						Menu_Volumes_01_Details "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						;;
				esac
				;;
		"searchs")
				case "${Menu_Input}" in
					"1")
						# 1.搜索镜像
						clear
						Menu_Searchs_01  "${SYS_FontClor}"
						;;
					"2")
						# 2.搜索清理
						#clear
						Menu_Searchs_02 "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:搜索管理
						Menu_Searchs  "${SYS_FontClor}"
						;;
				esac
				;;
		"searchs_01")			
				# 搜索详情
				#clear				
				Menu_Searchs_01_Details  "${SYS_FontClor}"
				;;			
		"search")			
				case "${Menu_Input}" in
					"1")
						# 1.拉取镜像
						#clear
						Menu_Search_01  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						#clear
						# 返回当前菜单:搜索详情
						# ${ENV_Menu_ListIndex} 来源于前面的 Menu_Searchs_01_Details()
						Menu_Searchs_01_Details  "${SYS_FontClor}"  "${ENV_Menu_ListIndex}"
						;;
				esac
				;;			
		"others")				
				case "${Menu_Input}" in
					"1")
						# 1.刷新缓存
						#clear
						Menu_Others_01  "${SYS_FontClor}"
						;;
					"2")
						# 2.读取日志
						clear
						Menu_Others_02  "${SYS_FontClor}"
						;;
					"3")
						# 3.清理日志
						#clear
						Menu_Others_03  "${SYS_FontClor}"
						;;
					"4")
						# 4.Docker信息
						clear
						Menu_Others_04  "${SYS_FontClor}"
						;;
					"5")
						# 5.设置
						clear
						Menu_Others_05  "${SYS_FontClor}"
						;;
					"6")
						# 6.关于
						clear
						Menu_Others_06  "${SYS_FontClor}"
						;;
					*)						
						if [ "${Menu_Input}" == "" ];then 
							read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
						else
							read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
						fi
						clear
						# 返回当前菜单:其它
						Menu_Others  "${SYS_FontClor}"
						;;
				esac
				;;
		"other")			
				echo other
				#Menu_Other_Set  "${SYS_FontClor}"
				;;			
		*)
				echo "Menu_Handle()：[未知选项]${Item}"
				return 1
				# 格式留用
				#case "${Menu_Input}" in
				#	"1")
				#		# 1.刷新缓存
				#		clear
				#		#Menu_Others_01  "${SYS_FontClor}"
				#		##Menu_Other_01  "${SYS_FontClor}"
				#		;;
				#	*)						
				#		if [ "${Menu_Input}" == "" ];then 
				#			read -n 1 -p "${LANG_InputNotEmptyContinue:-输入不能为空，按任意键继续...}" 
				#		else
				#			read -n 1 -p "${LANG_UnknownInputContinue:-未知输入，按任意键继续...}" 
				#		fi
				#		clear
				#		# 返回当前菜单:其它
				#		Menu_Others  "${SYS_FontClor}"
				#		;;
				#esac
				;;    
	esac
	
	# 清除变量
	unset Item
	unset PreviousMenu
	unset Menu_Input
	
	return 0
}
##### 函数测试 #####
#Menu_Handle "images" "Menu_Images"



# ----函数定义------------------------------------------------------------------------------------------#

# ----函数调用------------------------------------------------------------------------------------------#
# ${1,,} : 将字符串转换为小写
# 输出帮助文档
[ "${1,,}" == '--help' ] &&  outhelp


# ----函数调用------------------------------------------------------------------------------------------#







